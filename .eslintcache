[{"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\TechnicalSkills.js":"1","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\TechnicalSkillsContext.js":"2","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\resumeAcardion\\CreateResumeAcardion.js":"3","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostJobFields.js":"4","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\CountriesContext.js":"5","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\TechSkills2.js":"6","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\NewM.js":"7","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\keySkills\\KeySkillsSelect.js":"8"},{"size":6666,"mtime":1608308478647,"results":"9","hashOfConfig":"10"},{"size":884,"mtime":1608286057156,"results":"11","hashOfConfig":"10"},{"size":2759,"mtime":1608327400086,"results":"12","hashOfConfig":"10"},{"size":19733,"mtime":1608295021194,"results":"13","hashOfConfig":"10"},{"size":967,"mtime":1608294171820,"results":"14","hashOfConfig":"10"},{"size":6971,"mtime":1608327036306,"results":"15","hashOfConfig":"10"},{"size":7013,"mtime":1608333241407,"results":"16","hashOfConfig":"10"},{"size":3365,"mtime":1608337049497,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"kieyu0",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\TechnicalSkills.js",["35"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\TechnicalSkillsContext.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\resumeAcardion\\CreateResumeAcardion.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostJobFields.js",["36","37","38","39","40"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\CountriesContext.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\TechSkills2.js",["41"],"import React, {useState, useContext} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TechnicalSkillsContext} from \"../../../context/TechnicalSkillsContext\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport PropTypes from 'prop-types';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport NumberFormat from 'react-number-format';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport { withStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {saveTechSkills} from \"../../../stores/actions/technicalSkillsAction\";\r\nimport  \"../../../styles/TechSkills2.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n  \r\n  const ValidationTextField = withStyles({\r\n    root: {\r\n      '& input:invalid + fieldset': {\r\n        borderColor: 'ff1100',\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\n  export default function TechSkills2() {\r\n    const dispatch = useDispatch();\r\n    const techskills = useSelector(state => state.technicalSkillsReducer.techSkillsList)\r\n    const {technicalSkills} = useContext(TechnicalSkillsContext);\r\n    console.log(\"tech---->\", technicalSkills);\r\n    const classes = useStyles();\r\n  const {control } = useForm();\r\n    const [techSkill, setTechSkill] = useState({});\r\n    const [selected, setSelected] = useState(null);\r\n    \r\n    const onSubmit = (e) => {\r\n        console.log(\"tech before onsubmit\", techSkill);\r\n        e.preventDefault();\r\n        if(techSkill!==null){\r\n            dispatch(saveTechSkills(techSkill))\r\n        \r\n      setSelected(null)\r\n      setTechSkill({})\r\n      resetForm();\r\n      console.log(\"techSkill after submit\", techSkill);\r\n    };\r\n  const resetForm =() =>{\r\n    setTechSkill(techSkill.tech_skill_rank=\"\")\r\n  }\r\n    const handleRemoveTechSkill =(i)=>{\r\n        let list = [...techSkill];\r\n        list.splice(i, 1);\r\n        setTechSkill(list);\r\n    }\r\n  \r\n    const handleAddTechSkill =()=>{\r\n        setTechSkill([...techSkill, {tech_skill: \"\",  tech_skill_rank: \"\"}]);\r\n    }\r\n      \r\n      const handleChange = (e)=>{\r\n      const {name,value} = e.target\r\n      console.log(\"VALUE\", value);\r\n      console.log(\"SELECTED\", selected.title);\r\n      if(value){\r\n           techSkill.tech_skill = selected.title\r\n        techSkill.tech_skill_rank=value\r\n      setTechSkill(techSkill)\r\n      }\r\n     \r\n       \r\n      }\r\n      console.log(\"TECHSKILL\", techSkill);\r\n    return (\r\n        <div className=\"technical__skillsContainer\">\r\n          <div className=\"technical__skillsHeader\">\r\n            {techskills.length!==0 &&\r\n            techskills.map((sk, i) =>(\r\n               <div className=\"tech__skillbox\">\r\n                   <div className=\"tech__skillTitleBox\">\r\n                        <h5 className=\"tech__skillTitle\">{sk.tech_skill +\" \"+ sk.tech_skill_rank} %</h5>\r\n                   </div>\r\n                  <div className=\"tech_skillButtons\">\r\n                    <Fab size=\"small\" color=\"primary\" aria-label=\"edit\"  className={classes.margin}>\r\n                        <EditIcon className=\"tech__skillEdit\"/>\r\n                    </Fab>\r\n                    <Fab size=\"small\" color=\"secondary\" aria-label=\"delete\" className={classes.margin}>\r\n                        <DeleteOutlineIcon className=\"tech__skillDelete\"/>\r\n                    </Fab>\r\n                  </div>\r\n                  \r\n              </div>\r\n            ))\r\n            }\r\n           \r\n          </div>\r\n            <form className=\"technical__skillsForm\" onSubmit={onSubmit} id=\"tech_skillsForm\" onReset={resetForm}>\r\n                    <div className=\"special_box2\">\r\n                        <Controller\r\n                            render={({onChange, value}) =>\r\n                            <Autocomplete\r\n                                valiant=\"outlined\"\r\n                                options={technicalSkills}\r\n                                className=\"tech__skillsInput\"\r\n                                getOptionLabel={(option) => option.title}\r\n                                id={\"tech_skill\"}\r\n                                name={\"tech_skill\"}\r\n                                value={selected}\r\n                                onChange={((e, newValue)=>{\r\n                                    setSelected(newValue)\r\n                                })\r\n                                }\r\n                                renderInput={(params) => (\r\n                                <TextField {...params} label=\"Technical Skill\" variant=\"outlined\" margin=\"normal\" />\r\n                                )}\r\n                            />\r\n                            }\r\n                            name={\"tech_skill\"}\r\n                           control={control}\r\n                           rules= {{required: true}}\r\n                         /> \r\n                        <Controller\r\n                            render={({onChange, value}) =>\r\n                            <ValidationTextField\r\n                                label=\"Technical skill rank\"\r\n                                className=\"tech__skillsInput\"\r\n                                id=\"tech_rank\"\r\n                                defaultValue={techSkill.tech_skill_rank}\r\n                                onChange={e=>handleChange(e)}\r\n                                placeholder=\"from 1 to 100\"\r\n                                required\r\n                                name=\"tech_skill_rank\"\r\n                                variant=\"outlined\"\r\n                                multiline\r\n                                InputProps={{\r\n                                inputComponent: NumberFormatCustom,\r\n                                }}\r\n                            />\r\n                            }\r\n                            name=\"tech_skill_rank\"\r\n                            control={control}\r\n                            rules= {{required: true}}\r\n                        /> \r\n                    </div>\r\n            <button type=\"submit\" className=\"btn btn-success btn-block\">save</button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nfunction NumberFormatCustom(props) {\r\n    const { inputRef, onChange, ...other } = props;\r\n  \r\n    return (\r\n      <NumberFormat\r\n        {...other}\r\n        getInputRef={inputRef}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value,\r\n            },\r\n          });\r\n        }}\r\n        minLength=\"1\"\r\n        maxLength=\"3\"\r\n        isNumericString\r\n      />\r\n    );\r\n  }\r\n  \r\n  NumberFormatCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n  };","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\NewM.js",["42","43","44"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\keySkills\\KeySkillsSelect.js",["45","46","47"],{"ruleId":"48","severity":1,"message":"49","line":34,"column":11,"nodeType":"50","messageId":"51","endLine":34,"endColumn":21},{"ruleId":"48","severity":1,"message":"52","line":39,"column":13,"nodeType":"50","messageId":"51","endLine":39,"endColumn":14},{"ruleId":"48","severity":1,"message":"53","line":44,"column":11,"nodeType":"50","messageId":"51","endLine":44,"endColumn":18},{"ruleId":"48","severity":1,"message":"54","line":45,"column":54,"nodeType":"50","messageId":"51","endLine":45,"endColumn":63},{"ruleId":"48","severity":1,"message":"55","line":48,"column":12,"nodeType":"50","messageId":"51","endLine":48,"endColumn":22},{"ruleId":"48","severity":1,"message":"56","line":62,"column":11,"nodeType":"50","messageId":"51","endLine":62,"endColumn":20},{"ruleId":null,"fatal":true,"severity":2,"message":"57","line":184,"column":5},{"ruleId":"48","severity":1,"message":"58","line":53,"column":11,"nodeType":"50","messageId":"51","endLine":53,"endColumn":32},{"ruleId":"48","severity":1,"message":"59","line":59,"column":11,"nodeType":"50","messageId":"51","endLine":59,"endColumn":29},{"ruleId":"48","severity":1,"message":"60","line":65,"column":14,"nodeType":"50","messageId":"51","endLine":65,"endColumn":18},{"ruleId":"48","severity":1,"message":"61","line":4,"column":8,"nodeType":"50","messageId":"51","endLine":4,"endColumn":12},{"ruleId":"48","severity":1,"message":"62","line":24,"column":9,"nodeType":"50","messageId":"51","endLine":24,"endColumn":18},{"ruleId":"48","severity":1,"message":"63","line":83,"column":7,"nodeType":"50","messageId":"51","endLine":83,"endColumn":14},"no-unused-vars","'techskills' is assigned a value but never used.","Identifier","unusedVar","'t' is assigned a value but never used.","'postjob' is assigned a value but never used.","'formState' is assigned a value but never used.","'postedData' is assigned a value but never used.","'techSkill' is assigned a value but never used.","Parsing error: Unexpected token\n\n  182 |     name: PropTypes.string.isRequired,\n  183 |     onChange: PropTypes.func.isRequired,\n> 184 |   };\n      |     ^","'handleRemoveTechSkill' is assigned a value but never used.","'handleAddTechSkill' is assigned a value but never used.","'name' is assigned a value but never used.","'Chip' is defined but never used.","'keyskills' is assigned a value but never used.","'jobList' is assigned a value but never used."]