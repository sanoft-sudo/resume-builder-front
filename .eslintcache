[{"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\LoginAndRegister.js":"1","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\SignUp.js":"2","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\TabForRegister.js":"3","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Login.js":"4","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\SignIn.js":"5","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\SignInWithGoogle.js":"6","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\store.js":"7","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\App.js":"8","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\JobSearch.js":"9","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Contacts.js":"10","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\ResumeCreator.js":"11","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\EmployerContext.js":"12","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\CountriesContext.js":"13","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\timelines\\index.js":"14","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\personalDevReducer.js":"15","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\contactReducer.js":"16","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\languagesReducer.js":"17","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\JobSearchBanner.js":"18","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\CreateResumeMain.js":"19","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostJobFields.js":"20","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\type.js":"21","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\autocomleteInputs\\AutocompleteCountry.js":"22","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\resumeAcardion\\CreateResumeAcardion.js":"23","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostViewCard.js":"24","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\colorAction.js":"25","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\templates\\TemplateFour.js":"26","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\achivements\\AchievementForm.js":"27","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\keySkills\\KeySkillsSelect.js":"28","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\NewM.js":"29","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\keySkillsAction.js":"30","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\personalDevAction.js":"31","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\education\\EducationForm.js":"32","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\createProfile\\ProfileForm.js":"33","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\experienceAction.js":"34","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\contactInfoAction.js":"35","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\i18nextConfig.js":"36","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Home.js":"37","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Candidates.js":"38","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PageNotFound.js":"39","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\rootReducer.js":"40","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\JobSearchMain.js":"41","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\templates\\TemplateOne.js":"42","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\colorReducer.js":"43","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\CandidateSearchRight.js":"44","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\JobSearchRight.js":"45","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\ProgressBar.js":"46","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\templates\\TemplateTwo.js":"47","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\personalDevelopment\\PersonalDevelopment.js":"48","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\TechnicalSkills.js":"49","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\experience\\ExperienceForm2.js":"50","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\technicalSkillsAction.js":"51","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostView.js":"52","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\languagesAction.js":"53","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\drivingLAction.js":"54","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\tab\\TabForTemplates.js":"55","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\BuildCV.js":"56","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\drivingLReducer.js":"57","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\profileReducer.js":"58","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\educationFormReducer.js":"59","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\CandidateSearchMain.js":"60","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\BannerCandidates.js":"61","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\ColorPicker.js":"62","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostView1.js":"63","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\DrawerPost.js":"64","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\educationFormAction.js":"65","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\languageFrom\\LanguageForm.js":"66"},{"size":525,"mtime":1609186901678,"results":"67","hashOfConfig":"68"},{"size":7117,"mtime":1609611646656,"results":"69","hashOfConfig":"68"},{"size":2292,"mtime":1609596030179,"results":"70","hashOfConfig":"68"},{"size":271,"mtime":1609187299815,"results":"71","hashOfConfig":"68"},{"size":4216,"mtime":1609579165793,"results":"72","hashOfConfig":"68"},{"size":1041,"mtime":1609595069409,"results":"73","hashOfConfig":"68"},{"size":401,"mtime":1607957925720,"results":"74","hashOfConfig":"68"},{"size":3274,"mtime":1609027650173,"results":"75","hashOfConfig":"68"},{"size":366,"mtime":1607540770601,"results":"76","hashOfConfig":"68"},{"size":229,"mtime":1607755015617,"results":"77","hashOfConfig":"68"},{"size":276,"mtime":1609027524797,"results":"78","hashOfConfig":"68"},{"size":817,"mtime":1607740217300,"results":"79","hashOfConfig":"68"},{"size":967,"mtime":1608294171820,"results":"80","hashOfConfig":"68"},{"size":1371,"mtime":1607369521943,"results":"81","hashOfConfig":"68"},{"size":529,"mtime":1608542859164,"results":"82","hashOfConfig":"68"},{"size":440,"mtime":1608007951887,"results":"83","hashOfConfig":"68"},{"size":777,"mtime":1608525249648,"results":"84","hashOfConfig":"68"},{"size":5787,"mtime":1608462938414,"results":"85","hashOfConfig":"68"},{"size":917,"mtime":1608818896904,"results":"86","hashOfConfig":"68"},{"size":20159,"mtime":1608467238372,"results":"87","hashOfConfig":"68"},{"size":3043,"mtime":1609058856606,"results":"88","hashOfConfig":"68"},{"size":2477,"mtime":1608467926329,"results":"89","hashOfConfig":"68"},{"size":3535,"mtime":1608698639723,"results":"90","hashOfConfig":"68"},{"size":3096,"mtime":1607724073740,"results":"91","hashOfConfig":"68"},{"size":324,"mtime":1608654248238,"results":"92","hashOfConfig":"68"},{"size":21605,"mtime":1609028329664,"results":"93","hashOfConfig":"68"},{"size":6604,"mtime":1608638732787,"results":"94","hashOfConfig":"68"},{"size":3420,"mtime":1608544877953,"results":"95","hashOfConfig":"68"},{"size":7655,"mtime":1608734604556,"results":"96","hashOfConfig":"68"},{"size":352,"mtime":1608193898051,"results":"97","hashOfConfig":"68"},{"size":380,"mtime":1608542569054,"results":"98","hashOfConfig":"68"},{"size":7414,"mtime":1608639093340,"results":"99","hashOfConfig":"68"},{"size":7967,"mtime":1608783902313,"results":"100","hashOfConfig":"68"},{"size":368,"mtime":1608095888737,"results":"101","hashOfConfig":"68"},{"size":364,"mtime":1608068229032,"results":"102","hashOfConfig":"68"},{"size":940,"mtime":1607182452297,"results":"103","hashOfConfig":"68"},{"size":265,"mtime":1607570600276,"results":"104","hashOfConfig":"68"},{"size":413,"mtime":1607739925891,"results":"105","hashOfConfig":"68"},{"size":506,"mtime":1607305531654,"results":"106","hashOfConfig":"68"},{"size":1109,"mtime":1608693166943,"results":"107","hashOfConfig":"68"},{"size":582,"mtime":1607739577590,"results":"108","hashOfConfig":"68"},{"size":31707,"mtime":1609698012863,"results":"109","hashOfConfig":"68"},{"size":1231,"mtime":1608987001844,"results":"110","hashOfConfig":"68"},{"size":379,"mtime":1607739982059,"results":"111","hashOfConfig":"68"},{"size":357,"mtime":1607739987594,"results":"112","hashOfConfig":"68"},{"size":955,"mtime":1609670608348,"results":"113","hashOfConfig":"68"},{"size":21566,"mtime":1609612249691,"results":"114","hashOfConfig":"68"},{"size":6465,"mtime":1608795066548,"results":"115","hashOfConfig":"68"},{"size":6697,"mtime":1608316016869,"results":"116","hashOfConfig":"68"},{"size":11736,"mtime":1608637241043,"results":"117","hashOfConfig":"68"},{"size":709,"mtime":1608747338824,"results":"118","hashOfConfig":"68"},{"size":4710,"mtime":1607740713409,"results":"119","hashOfConfig":"68"},{"size":1839,"mtime":1609695791773,"results":"120","hashOfConfig":"68"},{"size":354,"mtime":1608539102283,"results":"121","hashOfConfig":"68"},{"size":2705,"mtime":1609612396097,"results":"122","hashOfConfig":"68"},{"size":212,"mtime":1607519468082,"results":"123","hashOfConfig":"68"},{"size":487,"mtime":1608538641150,"results":"124","hashOfConfig":"68"},{"size":901,"mtime":1608783678202,"results":"125","hashOfConfig":"68"},{"size":683,"mtime":1608546982634,"results":"126","hashOfConfig":"68"},{"size":612,"mtime":1607739406529,"results":"127","hashOfConfig":"68"},{"size":3103,"mtime":1607742682374,"results":"128","hashOfConfig":"68"},{"size":1039,"mtime":1608901275408,"results":"129","hashOfConfig":"68"},{"size":3525,"mtime":1608000114275,"results":"130","hashOfConfig":"68"},{"size":1632,"mtime":1607735841072,"results":"131","hashOfConfig":"68"},{"size":407,"mtime":1608067872380,"results":"132","hashOfConfig":"68"},{"size":6776,"mtime":1609695360876,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"kieyu0",{"filePath":"136","messages":"137","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"144"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"144"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"166","usedDeprecatedRules":"151"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"151"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"151"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"144"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"186","usedDeprecatedRules":"151"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"151"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"192","messages":"193","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"151"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"199","usedDeprecatedRules":"151"},{"filePath":"200","messages":"201","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"202","messages":"203","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"204","usedDeprecatedRules":"144"},{"filePath":"205","messages":"206","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"207","messages":"208","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"151"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"220","messages":"221","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"224","messages":"225","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"226","messages":"227","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"230","messages":"231","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"236","messages":"237","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"238","messages":"239","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"240","messages":"241","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"242","messages":"243","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"244","usedDeprecatedRules":"151"},{"filePath":"245","messages":"246","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"247","usedDeprecatedRules":"151"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"250","messages":"251","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"252","messages":"253","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"254","messages":"255","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"256","messages":"257","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"151"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"264","messages":"265","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"266","messages":"267","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"268","messages":"269","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"270","messages":"271","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"272","messages":"273","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"274","messages":"275","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"276","messages":"277","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"278","messages":"279","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"280","messages":"281","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\LoginAndRegister.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\SignUp.js",["282","283"],"\r\nimport React, { useRef, useState } from \"react\";\r\nimport {useForm} from \"react-hook-form\";\r\nimport Input from '@material-ui/core/Input';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport \"./SignUpForm.css\"\r\nimport SignInWithGoogle from \"./SignInWithGoogle\";\r\nconst eye = <i class=\"far fa-eye\"></i>\r\nconst eyeSlash = <i class=\"far fa-eye-slash\"></i>\r\nexport default function SignUp() {\r\n  const { register, errors, handleSubmit, watch } = useForm({});\r\n  const password = useRef({});\r\n  const initialUser = {\r\n        username: \"\",\r\n        email: \"\",\r\n        user_role:\"\",\r\n        password: \"\",\r\n  }\r\n  const [user, setUser] = useState(initialUser);\r\n  const [passwordShown, setPasswordShown] = useState(false);\r\n  const togglePasswordVisiblity = () => {\r\n    setPasswordShown(passwordShown ? false : true);\r\n  };\r\n  console.log(\"userinState\", user);\r\n\r\n  const handleChange = (e) => {\r\n    if (e.target.value !== \"admin\") {\r\n      setUser({\r\n        ...user,\r\n        [e.target.name]: e.target.value\r\n      });\r\n    } else {\r\n      alert(\"You can't take 'admin' as a username\");\r\n    }\r\n  };\r\n  password.current = watch(\"password\", \"\");\r\n  const onSubmit = (e) => {\r\n    // e.preventDefault();\r\n    setUser(initialUser)\r\n    setPasswordShown(false)\r\n  };\r\n\r\n  console.log(\"registered user\", user);\r\n  return (\r\n            <div className=\"sign__upBox\">\r\n            <form onSubmit={handleSubmit(onSubmit)} className=\"signup__form\" id={\"signup__form\"} autoComplete=\"off\">\r\n      \r\n                <div className=\"form__checkboxContainer\">\r\n                    <div className=\"form__checkbox\">\r\n                        <label>\r\n                            <input type=\"radio\" name=\"user_role\" value=\"employer\" required onChange={e=>handleChange(e)} />\r\n                            <img className=\"radio__image\" src=\"../../../assets/images/employer.png\"/>\r\n                            <p className=\"radio__title\">EMPLOYER</p>\r\n                        </label>\r\n                    </div>\r\n                    <div className=\"form__checkbox\">\r\n                        <label>\r\n                            <input type=\"radio\" name=\"user_role\" value=\"employee\" required  onChange={e=>handleChange(e)}/>\r\n                            <img className=\"radio__image\" src=\"../../../assets/images/employee.png\"/>\r\n                            <p className=\"radio__title\">EMPLOYEE</p>\r\n                        </label>\r\n                    </div>\r\n                </div>\r\n                {errors.user_role && errors.email.user_role}\r\n                <div className=\" signup__email\">\r\n                    <i className=\"far fa-envelope signup__emailIcon\"></i>\r\n                <FormControl className=\"signUpInput__container\">\r\n                    <InputLabel htmlFor=\"email\">Email</InputLabel>\r\n                    <Input\r\n                        name=\"email\"\r\n                        id=\"email\"\r\n                        type=\"email\"\r\n                        required\r\n                        milti\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"Email\"\r\n                        onChange={(e) => handleChange(e)}\r\n                        value={user?.email}\r\n                        ref={register({\r\n                        required: true,\r\n\r\n                        pattern: {\r\n                            value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                            message: \"invalid email address\"\r\n                        }\r\n                        })}\r\n                    />  \r\n                </FormControl>\r\n                </div>\r\n                {errors.email && errors.email.message}\r\n\r\n                <div className=\" signup__email\">\r\n                <i className=\"fas fa-user-tie signup__userIcon\"></i>\r\n                <FormControl className=\"signUpInput__container \">\r\n                    <InputLabel htmlFor=\"username\">Username</InputLabel>\r\n                    <Input\r\n                        name=\"username\"\r\n                        id=\"username\"\r\n                        milti\r\n                        placeholder=\"Username\"\r\n                        required\r\n                        autoComplete=\"off\"\r\n                        value={user.username}\r\n                        onChange={(e) => handleChange(e)}\r\n                        ref={register({\r\n                            required: true\r\n                        })}\r\n                    />\r\n                </FormControl>\r\n                </div>\r\n                {errors.username && errors.username.message}\r\n\r\n                <div className=\" signup__email\">\r\n                <i className=\"fas fa-unlock-alt signup__passwordIcon\"></i>\r\n\r\n                <FormControl className=\"signUpInput__container\">\r\n                    <InputLabel htmlFor=\"password\">Password</InputLabel>\r\n                        <Input\r\n                        name=\"password\"\r\n                        className=\"signup__passwordInput\"\r\n                        id=\"password\"\r\n                        required\r\n                        multi\r\n                        autoComplete=\"off\"\r\n                        placeholder=\"Password\"\r\n                        type={passwordShown ? \"text\" : \"password\"}\r\n                        value={user.password}\r\n                        onChange={(e) => handleChange(e)}\r\n                        ref={register({\r\n                        required: true,\r\n                        minLength: {\r\n                            value: 6,\r\n                            message: \"Password must have at least 6 characters\"\r\n                        }\r\n                        })}\r\n                    />\r\n                    <i className=\"signup__passwordShow\" onClick={togglePasswordVisiblity}>{passwordShown?eye:eyeSlash}</i>\r\n                </FormControl>\r\n                 </div>\r\n                {errors.password && <p>{errors.password.message}</p>}\r\n\r\n                {/* <FormControl className=\"signUpInput__container\">\r\n                <InputLabel htmlFor=\"password_repeat\">Confirm password</InputLabel>\r\n                <Input\r\n                    name=\"password_repeat\"\r\n                    id=\"password_repeat\"\r\n                    type=\"password\"\r\n                    multi\r\n                    placeholder=\"Re-type password\"\r\n                    onChange={(e) => handleChange(e)}\r\n                    ref={register({\r\n                    validate: (value) =>\r\n                        value === password.current || \"The passwords do not match\"\r\n                    })}\r\n                />\r\n                </FormControl>\r\n                {errors.password_repeat && <p>{errors.password_repeat.message}</p>} */}\r\n                \r\n                    <Button variant=\"contained\" className=\"signUp__submitBtn\" type=\"submit\"> sign up </Button>\r\n                \r\n            </form>\r\n            <p className=\"sign__upOr\">or</p>\r\n            <div className=\"sign__upWithSocials\">\r\n                <SignInWithGoogle/>\r\n            </div>\r\n            </div>\r\n   \r\n  );\r\n}\r\n\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\TabForRegister.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Login.js",["284"],"import React, {useContext} from 'react';\r\nimport LoginAndRegister from '../components/loginAndregister/LoginAndRegister';\r\n\r\n\r\nfunction Login() {\r\n\r\n    return (\r\n        <div id=\"login\">\r\n           <LoginAndRegister/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login\r\n",["285","286"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\SignIn.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\loginAndregister\\SignInWithGoogle.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\store.js",[],["287","288"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\App.js",["289"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\JobSearch.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Contacts.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\ResumeCreator.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\EmployerContext.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\context\\CountriesContext.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\timelines\\index.js",["290"],"import { TimelineMax as Timeline, Power1 } from 'gsap';\r\n\r\nconst getDefaultTimeline = (node, delay) => {\r\n  const timeline = new Timeline({ paused: true });\r\n  const content = node.querySelector('.content');\r\n  const contentInner = node.querySelector('.content--inner');\r\n\r\n  timeline\r\n    .from(node, 0.3, { display: 'none', autoAlpha: 0, delay, ease: Power1.easeIn })\r\n    .from(content, 0.15, { autoAlpha: 0, y: 25, ease: Power1.easeInOut })\r\n    .from(contentInner, 0.15, { autoAlpha: 0, delay: 0.15, ease: Power1.easeIn });\r\n\r\n  return timeline;\r\n}\r\n\r\nconst getHomeTimeline = (node, delay) => {\r\n  const timeline = new Timeline({ paused: true });\r\n  const texts = node.querySelectorAll('h1 > div');\r\n\r\n  timeline\r\n    .from(node, 0, { display: 'none', autoAlpha: 0, delay })\r\n    .staggerFrom(texts, 0.375, { autoAlpha: 0, x: -25, ease: Power1.easeOut }, 0.125);\r\n\r\n  return timeline;\r\n}\r\n\r\nexport const play = (pathname, node, appears) => {\r\n  const delay = appears ? 0 : 0.5;\r\n  let timeline\r\n\r\n  if (pathname === '/')\r\n    timeline = getHomeTimeline(node, delay);\r\n  else\r\n    timeline = getDefaultTimeline(node, delay);\r\n\r\n  window. requestAnimationFrame(() => timeline.play())\r\n}\r\n\r\nexport const exit = (node) => {\r\n  const timeline = new Timeline({ paused: true });\r\n\r\n  timeline.to(node, 0.15, { autoAlpha: 0, ease: Power1.easeOut });\r\n  timeline.play();\r\n}\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\personalDevReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\contactReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\languagesReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\JobSearchBanner.js",["291"],"import React, {useContext} from 'react';\r\nimport {useHistory} from \"react-router-dom\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport {EmployerContext} from \"../context/EmployerContext\";\r\nimport \"../styles/JobSearchBanner.css\"\r\nimport BusinessCenterIcon from '@material-ui/icons/BusinessCenter';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport RoomIcon from '@material-ui/icons/Room';\r\n\r\nfunction JobSearchBanner() {\r\n    const { t } = useTranslation();\r\n    const history = useHistory();\r\n  const {employers} = useContext(EmployerContext);\r\n  let jobs = employers;\r\n    return (\r\n        <div className=\"jobsearchbanner\">\r\n            <div className=\"form__container\">\r\n                <form className=\"custom__form\" action=\"#\" id=\"findJobSubmit\">\r\n                    <div className=\"row form_row\">\r\n                        <div className=\"col-md-8\">\r\n                            <div className=\"row form__searchRow\">\r\n                                <div className=\"col-md-6\">\r\n                            <label className=\"labelWhat\" htmlFor=\"free-solo-demo\"><h3>{t(\"banner_find_job_label1\")}</h3></label>\r\n                            <Autocomplete\r\n                                id=\"free-solo-demo\"\r\n                                freeSolo\r\n                                options={jobs.map((job) => job.job_title)}\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                    {...params}\r\n                                    label={t(\"banner_find_job_placeholder1\")}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                    InputProps={{ ...params.InputProps, type: 'search', startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <BusinessCenterIcon/>\r\n                                        </InputAdornment>\r\n                                      ), }}\r\n                                \r\n                                />\r\n                                )}\r\n                            />\r\n                        </div>\r\n                                <div className=\"col-md-6\">\r\n                           <label className=\"labelWhat\" htmlFor=\"free-solo-2-demo\"><h3>{t(\"banner_find_job_label2\")}</h3></label>\r\n                            <Autocomplete\r\n                                freeSolo\r\n                                id=\"free-solo-2-demo\"\r\n                                options={jobs.map((job) => job.country)}\r\n                                renderInput={(params) => (\r\n                                <TextField\r\n                                    {...params}\r\n                                    label={t(\"banner_find_job_placeholder2\")}\r\n                                    margin=\"normal\"\r\n                                    variant=\"outlined\"\r\n                                    InputProps={{ ...params.InputProps, type: 'search', startAdornment: (\r\n                                        <InputAdornment position=\"start\">\r\n                                          <RoomIcon/>\r\n                                        </InputAdornment>\r\n                                      ), }}\r\n                                />\r\n                            )}\r\n                            />    \r\n                        </div>\r\n                            </div>\r\n                            <div className=\"row form__salaryRow\">\r\n                                <div className=\"col\">\r\n                                  <label className=\"labelWhat\"><h4>Salary</h4></label>\r\n                                  <div className=\"row\">\r\n                                  <div className=\"col-md-4 salary__range\">\r\n                                    <label htmlFor=\"from\">From </label>\r\n                                    <input type=\"number\" id=\"from\" name=\"fromSalary\"/>\r\n                                </div>\r\n                                <div className=\"col-md-4 salary__range\">\r\n                                    <label htmlFor=\"to\">To </label>\r\n                                    <input type=\"number\" id=\"to\" name=\"toSalary\"/>\r\n                                </div>\r\n                                <div className=\"col-md-4 salary__range\">\r\n                                    <label htmlFor=\"salary__type \">Payment </label>\r\n                                    <select name=\"salary__type\" id=\"salary__type\">\r\n                                        <option key=\"value\" value=\"0\" disabled>Select an option</option>\r\n                                        <option key=\"value\" value=\"4\">hour</option>\r\n                                        <option key=\"value\" value=\"5\">day</option>\r\n                                        <option key=\"value\" value=\"6\">month</option>\r\n                                    </select>\r\n                                </div>\r\n                                  </div>  \r\n                                </div>\r\n                                \r\n                                \r\n                            </div>\r\n                        </div>\r\n                        <div className=\"col-md-4\">\r\n                            <button className=\"btn btn-info form__searchButton findJob__buttonFind\" htmlFor=\"findJobSubmit\">{t(\"banner_find_job_find_button1\")} <SearchIcon color=\"white\"/></button>\r\n                        </div>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JobSearchBanner\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\CreateResumeMain.js",["292"],"import React from 'react';\r\nimport \"../../styles/CreateResumeMain.css\";\r\nimport CreateResumeAcardion from './resumeAcardion/CreateResumeAcardion';\r\nimport TemplateTwo from \"../../templates/TemplateTwo\"\r\nimport ColorPicker from './ColorPicker';\r\nimport TabForTemplates from './tab/TabForTemplates';\r\n\r\n\r\nfunction CreateResumeMain() {\r\n    return (\r\n        <div>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-8\">\r\n                    <div className=\"row\">\r\n                        <div className=\"col\">\r\n                            <TabForTemplates/>\r\n                        </div>\r\n                    </div>\r\n                    \r\n                </div>\r\n                <div className=\"col-md-4\">\r\n                    <ColorPicker/>\r\n                    <CreateResumeAcardion/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CreateResumeMain;\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostJobFields.js",["293","294","295","296","297"],"import React, { useState, useContext}  from 'react';\r\nimport { useTranslation } from \"react-i18next\";\r\nimport PhoneInput from 'react-phone-input-2'\r\nimport 'react-phone-input-2/lib/style.css'\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport \"../styles/PostJobFields.css\";\r\nimport PostView1 from './PostView1';\r\nimport Select from \"react-select\"\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as yup from \"yup\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {savePostJob} from \"../stores/actions/postJobFieldsAction\"\r\nimport {TechnicalSkillsContext} from \"../context/TechnicalSkillsContext\";\r\nimport { CountriesContext } from '../context/CountriesContext';\r\nimport AutocompleteCountry from './autocomleteInputs/AutocompleteCountry';\r\n\r\nconst schema = yup.object().shape({\r\n    adRegion: yup.string().required(),\r\n    city: yup.string().required(),\r\n    companyName: yup.string().required(),\r\n    country: yup.string().required(),\r\n    email: yup.string().required(),\r\n    fromSalary: yup.number().positive().integer().required(),\r\n    fullName: yup.string().required(),\r\n    industry: yup.string().required(),\r\n    jobCondition: yup.string().required(),\r\n    jobTitle: yup.string().required(),\r\n    jobType: yup.string().required(),\r\n    region: yup.string().required(),\r\n    salaryType: yup.string().required(),\r\n    workplace: yup.string().required(),\r\n    toSalary: yup.number().positive().integer().required(),\r\n  });\r\n\r\nfunction PostJobFields() {\r\n    const { t } = useTranslation();\r\n    const dispatch = useDispatch();\r\n    const {technicalSkills} = useContext(TechnicalSkillsContext);\r\n    const countries = useContext(CountriesContext)\r\n    console.log(\"counties\", countries);\r\n    const postjob = useSelector(state => state.postjobReducer.postjob)\r\n    const { register, errors, handleSubmit, control, formState } = useForm({resolver: yupResolver(schema)});\r\n    \r\n    const [phone, setPhone] = useState('');\r\n    const [postedData, setPostedData] = useState({});\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const toggleChecked = () => {\r\n      setChecked((prev) => !prev);\r\n    };\r\n    \r\n    const onSubmit = (data, e) => {\r\n        console.log(\"manaaaa>>>\", data);\r\n        dispatch(savePostJob(data))\r\n        setPostedData(data);\r\n        e.target.reset();\r\n        setPhone(\"\")\r\n    }\r\n    const techSkill = [\r\n        { value: 'react', label: 'REACT' },\r\n        { value: 'html', label: 'HTML' },\r\n        { value: 'css', label: 'CSS' },\r\n        { value: 'javascript', label: 'JAVASCRIPT' },\r\n        { value: 'vue', label: 'VUE' },\r\n        { value: 'redux', label: 'REDUX' },\r\n        { value: 'angular', label: 'ANGULAR' },\r\n        { value: 'english teacher', label: 'English teacher' },\r\n        { value: 'nurse', label: 'Nurse' },\r\n        { value: 'accountant', label: 'Accountant' },\r\n        { value: 'cleaner', label: 'Cleaner' }\r\n        ]\r\n    const languages = [\r\n        {value: 'uzbek', label: \"Uzbek\"},\r\n        {value: 'russian', label: \"Russian\"},\r\n        {value: 'english', label: \"English\"}\r\n    ]\r\n    \r\n    return (\r\n            <div id=\"jobPostFields\">\r\n                <div className=\"jobpost__bg\">\r\n                        <h2 className=\"jobpost__title\">Create your account to post your job</h2>\r\n                        <div className=\"row\">\r\n                            <div className=\"col-md-6\">\r\n                                <form className=\"jobpost__form\" id=\"jobfields\" onSubmit={handleSubmit(onSubmit)}>               \r\n                                <label name=\"companyLabel\"  htmlFor=\"company\">Your company name <span className=\"required\">*</span></label>\r\n                                <input name=\"companyName\" id=\"company\" ref={register({ required: true})} />\r\n                                <p className=\"error__message\">{errors?.companyName?.message}</p>\r\n\r\n                                <label name=\"fullNameLabel\" htmlFor=\"fullname\">Your full name <span className=\"required\">*</span></label>\r\n                                <input type=\"text\" id=\"fullname\" name=\"fullName\" ref={register({ required: true})}/>\r\n                                <p className=\"error__message\">{errors.fullName?.message}</p>\r\n\r\n                                <label name=\"emailLabel\" htmlFor=\"email\">Your Email <span className=\"required\">*</span></label>\r\n                                <input name=\"email\" id=\"email\"\r\n                                        ref={register({\r\n                                            required: true,\r\n                                            validate: (input) => isEmail(input),\r\n                                        })}\r\n                                        placeholder=\"Email\"\r\n                                />\r\n                                <p className=\"error__message\">{errors.email?.message}</p>\r\n\r\n                                <label name=\"phoneLabel\" htmlFor=\"phone\">Your number (optional)</label>\r\n                                <Controller\r\n                                    as={\r\n                                        <PhoneInput\r\n                                    inputProps={{\r\n                                    name: 'phone',\r\n                                    required: true,\r\n                                    autoFocus: true\r\n                                    }}\r\n                                    country={'uz'}\r\n                                    value={phone}\r\n                                    onChange={phone => setPhone({ phone })}\r\n                                /> }\r\n                                name=\"phone\"\r\n                                control={control}\r\n                                rules= {{required: false}}\r\n                                /> \r\n                                {/* <input type=\"tel\" id=\"tel\" name=\"tel\" ref={register({ required: true})}/> */}\r\n                                <label name=\"cityLabel\" htmlFor=\"city\">City <span className=\"required\">*</span></label>\r\n                                <input type=\"text\" id=\"city\" name=\"city\" ref={register({ required: true})}/>\r\n                                <p className=\"error__message\">{errors.city?.message}</p>\r\n\r\n                                <label name=\"regionLabel\" htmlFor=\"region\">Region <span className=\"required\">*</span></label>\r\n                                <input type=\"text\" id=\"region\" name=\"region\" ref={register({ required: true})}/>\r\n                                <p className=\"error__message\">{errors.region?.message}</p>\r\n\r\n                                <label name=\"countryLabel\" htmlFor=\"country\">Country <span className=\"required\">*</span></label>\r\n                                <Controller\r\n                                    as={\r\n                                        <AutocompleteCountry/>\r\n                                    }\r\n                                    name=\"isNightShift\"\r\n                                    control={control}\r\n                                    />\r\n                                {/* <input type=\"text\" id=\"country\" name=\"country\" ref={register({ required: true})}/> */}\r\n                                <p className=\"error__message\">{errors.country?.message}</p>\r\n\r\n                                <label name=\"industryLabel\" htmlFor=\"industry\">Industry <span className=\"required\">*</span></label>\r\n                                <p>Select the industry thst best describes your company.</p>\r\n                                <select name=\"industry\" ref={register({required:true})}>\r\n                                    <option value=\"industry1\">industry1</option>\r\n                                    <option value=\"industry2\">industry2</option>\r\n                                    <option value=\"industry3\">industry3</option>\r\n                                </select>\r\n\r\n                                <label name=\"jobTitleLabel\" htmlFor=\"jobTitle\">Job title <span className=\"required\">*</span></label>\r\n                                <input type=\"text\" id=\"jobTitle\" name=\"jobTitle\" ref={register({ required: true})}/>\r\n                                <p className=\"error__message\">{errors.jobTitle?.message}</p>\r\n\r\n                                <label name=\"question\">Where will employee work? <span className=\"required\">*</span></label>\r\n                                <div className=\"radios\">\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"atoffice\" name=\"workplace\" value=\"At Office\" ref={register({ required: true})}/>\r\n                                        <label name=\"atofficeLabel \" htmlFor=\"atoffice\">At Office</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"multiloc\" name=\"workplace\" value=\"Multi-location\" ref={register({ required: true})}/>\r\n                                        <label name=\"multilocLabel\" htmlFor=\"multiloc\">Multi Locations</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"remote-19\" name=\"workplace\" value=\"Remote Due To Covid-19\"/>\r\n                                        <label name=\"remoteDueToLabel\" htmlFor=\"remote-19\" ref={register({ required: true})}>Remote due to Covid-19</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"fulRemote\" name=\"workplace\" value=\"Full Remote\" ref={register({ required: true})}/>\r\n                                        <label name=\"fullRemoteLabel\" htmlFor=\"fulRemote\">Fully remote</label>\r\n\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"ontheroad\" name=\"workplace\" value=\"On The Road\" ref={register({ required: true})}/>\r\n                                        <label name=\"onTheRoadLabel\" htmlFor=\"ontheroad\">On the road</label>\r\n                                    </div>\r\n                                </div>\r\n                                \r\n                                <label name=\"adverLocLabel\" htmlFor=\"advertloc\">Where would you like to advertise this job? <span className=\"required\">*</span> </label>\r\n                                <input type=\"text\" id=\"advertloc\" name=\"adRegion\" autoComplete={true}\r\n                                ref={register({ required: true})}\r\n                                />\r\n                                \r\n                                <label>Is this job full time or part time? <span className=\"required\">*</span></label>\r\n                                <div className=\"radios\">\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"full\" name=\"jobCondition\" value=\"Full Time\" ref={register({ required: true})}/>\r\n                                    <label name=\"fullTimeLabel\" htmlFor=\"full\">Full time</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"part\" name=\"jobCondition\" value=\"Part Time\" ref={register({ required: true})}/>\r\n                                    <label name=\"partTimeLabel\" htmlFor=\"part\">Part time</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"fullandpart\" name=\"jobCondition\" value=\"Part And Full Time\" ref={register({ required: true})}/>\r\n                                    <label name=\"fullAndPartLabel\" htmlFor=\"fullandpart\">Either full-time or paer-time</label>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n\r\n                                <label>Are these additional job types that apply? <span className=\"required\">*</span></label>\r\n                                <div className=\"radios\">\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"internship\" name=\"jobType\" value=\"internship\" ref={register({ required: true})}/>\r\n                                        <label name=\"internshipLabel\" htmlFor=\"internship\">Internship</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"temporary\" name=\"jobType\" value=\"temporary\" ref={register({ required: true})}/>\r\n                                        <label name=\"tempLabel\" htmlFor=\"temporary\">Temporary</label>\r\n                                    </div>\r\n                                    <div className=\"radio__btn\">\r\n                                        <input type=\"radio\" id=\"contract\" name=\"jobType\" value=\"contract\" ref={register({ required: true})}/>\r\n                                        <label name=\"contractLabel\" htmlFor=\"contract\">Contract</label>\r\n                                    </div>\r\n                                    \r\n                                </div>\r\n                                <label name=\"salaryLabel\" htmlFor=\"salfrom\">Salary</label>\r\n\r\n                                <div className=\"salary_inputs\">\r\n                                <div className=\"row salary_box\">\r\n                                    <div className=\"col-md-4 inp\">\r\n                                        <label name=\"fromLabel\" htmlFor=\"from\">From </label>\r\n                                        <input type=\"number\" id=\"salfrom\" name=\"fromSalary\" ref={register({ required: true})}/>\r\n                                        <p className=\"error__message\">{errors.fromSalary?.message}</p>\r\n                                    </div>\r\n                                    <div className=\"col-md-4 inp\">\r\n                                        <label name=\"toLabel\" htmlFor=\"to\">To </label>\r\n                                        <input type=\"number\" id=\"to\" name=\"toSalary\" ref={register({ required: true})}/>\r\n                                        <p className=\"error__message\">{errors.toSalary?.message}</p>\r\n                                    </div>\r\n                                    <div className=\"col-md-4 inp\">\r\n                                    <div className=\"sal_type\">\r\n                                        <label name=\"typeLabel\" htmlFor=\"salaryType\">Type </label>\r\n                                        <select name=\"salaryType\" id=\"salaryType\" ref={register({ required: true})}>\r\n                                            <option key=\"value\" value=\"0\" disabled>Select an option</option>\r\n                                            <option key=\"value\" value=\"hour\">hour</option>\r\n                                            <option key=\"value\" value=\"day\">day</option>\r\n                                            <option key=\"value\" value=\"month\">month</option>\r\n                                        </select>\r\n                                        <p className=\"error__message\">{errors.salaryType?.message}</p>\r\n                                    </div> \r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"nightShift\">\r\n                                <Controller\r\n                                    as={\r\n                                <FormGroup>\r\n                                <FormControlLabel\r\n                                    control={<Switch checked={checked} color=\"primary\" \r\n                                    defaultValue={checked} ref={register({required:false})} \r\n                                    name=\"isNightShift\" \r\n                                    onChange={toggleChecked} \r\n                                    value={!checked? \"Night job\" : \"Day job\"}\r\n                                    />}\r\n                                    label={checked? \"Nightshift\" : \"Dayshift\"}\r\n                                />\r\n                                </FormGroup>\r\n                                }\r\n                                name=\"isNightShift\"\r\n                                control={control}\r\n                                // rules= {{required:false}} \r\n                         />\r\n                                </div>\r\n                                <div className=\"additional\">\r\n                                    <label name=\"aboutJob\" htmlFor=\"aboutJob\">About job </label>\r\n                                    <textarea name=\"aboutJob\" id=\"aboutJob\" cols=\"30\" rows=\"7\" ref={register({ required: false})}></textarea>\r\n                                    <label name=\"addReqLabel\" htmlFor=\"addRequirement\">Additional requirements(if needed) </label>\r\n                                    <textarea name=\"addRequirement\" id=\"addRequirement\" cols=\"30\" rows=\"7\" ref={register({ required: false})}></textarea>\r\n                                </div>\r\n                                <div>\r\n                                <label className=\"language__title\">Skills</label>\r\n                                 <Controller\r\n                                    as={\r\n                                <Select\r\n                                    defaultValue={[]}\r\n                                    isMulti\r\n                                    name=\"skills\"\r\n                                    options={technicalSkills}\r\n                                    className=\"basic-multi-select\"\r\n                                    classNamePrefix=\"select\"\r\n                                />\r\n                                    }\r\n                                    name=\"skills\"\r\n                                    control={control}\r\n                                    rules= {{required: true}}\r\n                                />\r\n                                <p className=\"error__message\">{errors.skills?.message}</p>\r\n                                <label className=\"language__title\">Languages</label>\r\n                                <Controller\r\n                                    as={\r\n                                <Select\r\n                                    defaultValue={[]}\r\n                                    isMulti\r\n                                    name=\"languages\"\r\n                                    options={languages}\r\n                                    className=\"basic-multi-select\"\r\n                                    classNamePrefix=\"select\"\r\n                                />\r\n                                    }\r\n                                    name=\"languages\"\r\n                                    control={control}\r\n                                    rules= {{required: true}}\r\n                                />\r\n                                <p className=\"error__message\">{errors.languages?.message}</p>      \r\n\r\n                               \r\n                                </div>\r\n                                    \r\n                                </div>\r\n                                <button htmlFor=\"jobfields\" className=\" btn btn-success postJobFieldButton mt-5\" type=\"submit\">Save and Post</button>\r\n                            </form>\r\n                                \r\n                            </div>\r\n                            <div className=\"col-md-6\">\r\n                                <PostView1/>\r\n                            </div>\r\n                        </div>\r\n                        \r\n                </div>\r\n                {\r\n                    \r\n                }\r\n        </div>\r\n    )\r\n  \r\n}\r\n\r\nexport default PostJobFields\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\type.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\autocomleteInputs\\AutocompleteCountry.js",["298","299","300"],"\r\nimport React, {useState, useEffect} from \"react\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\nimport countries from \"i18n-iso-countries\";\r\nimport uzbek from \"i18n-iso-countries/langs/uz.json\";\r\nimport english from \"i18n-iso-countries/langs/en.json\";\r\nimport russian from \"i18n-iso-countries/langs/ru.json\";\r\nimport { useTranslation } from \"react-i18next\";\r\nfunction sleep(delay = 0) {\r\n  return new Promise((resolve) => {\r\n    setTimeout(resolve, delay);\r\n  });\r\n}\r\ncountries.registerLocale(uzbek);\r\ncountries.registerLocale(english);\r\ncountries.registerLocale(russian);\r\nconst uz = countries.getNames(\"uz\", { select: \"official\" });\r\nconst ru = countries.getNames(\"ru\", { select: \"official\" });\r\nconst en = countries.getNames(\"en\", { select: \"official\" });\r\n\r\nexport default function AutocompleteCountry() {\r\nconst { t, i18n } = useTranslation();\r\n  const [open, setOpen] = useState(false);\r\n  const [count, setCount] = useState([]);\r\n\r\n  console.log(\"Count\", count);\r\n  useEffect(() => {\r\n    if(i18n.language===\"uz\"){\r\n        Object.keys(uz).forEach((key, i) => {\r\n        if (key === \"UZ\") {\r\n          count[i] = {\r\n            id: key,\r\n            name: \"O'zbekiston\"\r\n          };\r\n        } else {\r\n          count[i] = {\r\n            id: key,\r\n            name: uz[key]\r\n          };\r\n        }\r\n      });\r\n    }else if(i18n.language===\"ru\"){\r\n        Object.keys(ru).forEach((key, i) => {\r\n              count[i] = {\r\n                id: key,\r\n                name: ru[key]\r\n              };\r\n    })\r\n    }else{\r\n        Object.keys(en).forEach((key, i) => {\r\n            count[i] = {\r\n              id: key,\r\n              name: en[key]\r\n            };\r\n    })\r\n    }\r\n  }, [t, i18n])\r\n\r\n  \r\n\r\n  return (\r\n    <div>\r\n      <Autocomplete\r\n        id=\"country\"\r\n        style={{ width: \"100% \" }}\r\n        open={open}\r\n        onOpen={() => {\r\n          setOpen(true);\r\n        }}\r\n        onClose={() => {\r\n          setOpen(false);\r\n        }}\r\n        getOptionSelected={(option, value) => option.name === value.name}\r\n        getOptionLabel={(option) => option.name}\r\n        options={count}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            label={t(\"autocomplete_country\")}\r\n            variant=\"outlined\"\r\n            InputProps={{\r\n              ...params.InputProps\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\resumeAcardion\\CreateResumeAcardion.js",["301","302"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport \"../../../styles/CreateResumeAcardion.css\";\r\nimport ProfileForm from \"../createProfile/ProfileForm\";\r\nimport ContactInformation from \"../createContacts/ContactInformation\"\r\nimport EducationForm from '../education/EducationForm';\r\nimport ExperienceForm2 from '../experience/ExperienceForm2';\r\nimport NewM from \"../technicalSkills/NewM\";\r\nimport TechSkills2 from \"../technicalSkills/TechSkills2\";\r\nimport TechnicalSkills from \"../technicalSkills/TechnicalSkills\";\r\nimport KeySkillsSelect from '../keySkills/KeySkillsSelect';\r\nimport AchievementForm from '../achivements/AchievementForm';\r\nimport LanguageForm from '../languageFrom/LanguageForm';\r\nimport DrivingLicence from '../drivingL/DrivingLicence';\r\nimport PersonalDevelopment from '../personalDevelopment/PersonalDevelopment';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\nconst fields = [\r\n    {id: \"ab\", label: \"Personal information\", icon: <i class=\"fas fa-user\"></i>,\r\n    data: <ProfileForm/>},\r\n    {id: \"cb\", label: \"Contact information\", icon: <i class=\"far fa-address-book\"></i>,\r\n    data: <ContactInformation/>},\r\n    {id: \"db\", label: \"Education\", icon: <i class=\"fas fa-user-graduate\"></i>,\r\n    data: <EducationForm/>},\r\n    {id: \"eb\", label: \"Experience\", icon: <i class=\"fas fa-suitcase\"></i>,\r\n    data: <ExperienceForm2/>},\r\n    {id: \"fb\", label: \"Key Skills\", icon: <i class=\"fas fa-shapes\"></i>,\r\n    data: <KeySkillsSelect/>},\r\n    {id: \"gb\", label: \"Technical Skills\", icon: <i class=\"fas fa-chart-bar\"></i>,\r\n    data: <NewM/>},\r\n    {id: \"hb\", label: \"Achievements\", icon: <i class=\"fas fa-award\"></i>,\r\n    data: <AchievementForm/>},\r\n    {id: \"ib\", label: \"Languages\", icon: <i class=\"fas fa-language\"></i>,\r\n    data: <LanguageForm/>},\r\n    {id: \"Jb\", label: \"Driving licence\", icon: <i class=\"far fa-address-card\"></i>,\r\n    data: <DrivingLicence/>},\r\n    {id: \"kb\", label: \"Personal Development\", icon: <i class=\"fas fa-chart-line\"></i>,\r\n    data: <PersonalDevelopment/>},\r\n   \r\n\r\n]\r\n function CreateResumeAcardion() {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n\r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"container-fluild\">\r\n       <div className={classes.root}>\r\n        {fields?.map((field, index) =>(\r\n            <Accordion key={index} expanded={expanded === \"panel\"+field.id} onChange={handleChange(\"panel\"+field.id)}>\r\n                <AccordionSummary\r\n                expandIcon={field.icon}\r\n                aria-controls={\"panel\"+field.id +\"bh-content\"}\r\n                id={\"panel\"+field.id+\"bh-header\"}\r\n                >\r\n                <Typography className={classes.heading}>{field.label}</Typography>\r\n                </AccordionSummary>\r\n                <AccordionDetails>\r\n                  \r\n                   {field.data}\r\n                </AccordionDetails>\r\n            </Accordion>\r\n        ))}\r\n    </div>\r\n    </div>\r\n   \r\n  );\r\n}\r\n\r\nexport default CreateResumeAcardion;","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostViewCard.js",["303"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\colorAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\templates\\TemplateFour.js",["304","305","306","307"],"import React, {createRef, useState} from 'react';\r\nimport \"./templateStyles/TemplateFour.css\";\r\nimport ProgressBar from '../components/ProgressBar';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Pdf from \"react-to-pdf\";\r\n\r\n\r\n\r\n\r\nfunction TemplateFour() {\r\nconst [progressColors, setProgressColors] = useState([\r\n    {id:777, color: \"#6a1b9a\"},\r\n    {id:888, color: \"#32a852\"},\r\n    {id:999, color: \"#3250a8\"},\r\n    {id:666, color: \"#dbd144\"},\r\n    {id:555, color: \"#c42121\"},\r\n])\r\nconst ref = createRef();\r\n\r\nconst dispatch = useDispatch();\r\nconst profileInfo = useSelector(state => state.profileReducer.profileInfo);\r\nconst contact = useSelector(state => state.contactReducer.contact);\r\nconst educations = useSelector(state => state.educationReducer.educations)\r\nconst experiences = useSelector(state => state.experienceReducer.experiences)\r\nconst keyskillsList = useSelector(state => state.keySkillsReducer.keyskillsList)\r\nconst techSkillsList = useSelector(state => state.technicalSkillsReducer.techSkillsList)\r\nconst achievements = useSelector(state => state.achievementsReducer.achievements)\r\nconst languagesList = useSelector(state => state.languagesReducer.languagesList)\r\nconst drLicences = useSelector(state => state.drivingLReducer.drLicences)\r\nconst personalDevInfo  = useSelector(state => state.personalDevReducer.personalDevInfo);\r\nconst selectedColor = useSelector(state => state.colorReducer.selectedColor)\r\nconsole.log(\"selected color>>>>\", selectedColor);\r\nconst options = {\r\n    orientation: 'portrait',\r\n    unit: 'cm',\r\n    format: [4,2]\r\n};\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <Pdf targetRef={ref} fileName=\"template-four.pdf\"  >\r\n                {({toPdf})=> <button onClick={toPdf}>save as pdf</button>}\r\n            </Pdf>\r\n            <div className=\"templateFour__container\" ref={ref}>\r\n                <div className=\"templateFour__header\" style={{backgroundColor:selectedColor.colorSide, color: selectedColor.textColor}}>\r\n                    <div className=\"templateFour__headerContacts\">\r\n                    {contact.address ? (\r\n                                <div className=\"templateFour__rightContact\">\r\n                                    <i class=\"fas fa-home\"  style={{color: selectedColor.textColor}}></i>\r\n                                    <p className=\"contact__titlesFour\">\r\n                                        {contact.address}\r\n                                    </p>\r\n                                </div>\r\n                            ):\"\"}\r\n                            {contact.email ? (\r\n                                <div className=\"templateFour__rightContact\">\r\n                                   <i class=\"far fa-envelope\"  style={{color: selectedColor.textColor}}></i>\r\n                                    <p className=\"contact__titlesFour\">\r\n                                        {contact.email}\r\n                                    </p>\r\n                                </div>\r\n                            ):\"\"}\r\n                            {contact.phone ? (\r\n                                <div className=\"templateFour__rightContact\">\r\n                                    <i class=\"fas fa-phone-square-alt\"  style={{color: selectedColor.textColor}}></i>\r\n                                    <p className=\"contact__titlesFour\">\r\n                                        {contact.phone}\r\n                                    </p>\r\n                                </div>\r\n                            ):\"\"}\r\n                    </div>\r\n                    <div className=\"templateFour__headerName\">\r\n                        <div className=\"templateFour__headerProfile\">\r\n                            <p className=\"templateFour__headerFullName\">\r\n                            {profileInfo.firstName && profileInfo?.firstName+\" \"+ profileInfo?.lastName}\r\n                            </p>\r\n                            <p className=\"templateFour__headerJobTitle\">\r\n                            {profileInfo?.currentJob}\r\n                            </p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"templateFour__headerSocials\">\r\n                    {contact.facebook ? (\r\n                                <div className=\"social__contactsFour\">\r\n                                     <p className=\"contact__nameFour\">\r\n                                    {contact.facebook}\r\n                                    </p>  \r\n                                     <i class=\"fab fa-facebook-square\" style={{color: selectedColor.textColor}}></i>\r\n                                           \r\n                                </div>\r\n                            ): \"\"}\r\n                            {contact.instagram ? (\r\n                               <div className=\"social__contactsFour\">\r\n                                   <p className=\"contact__nameFour\">\r\n                                        {contact.instagram}\r\n                                    </p>\r\n                                    <i class=\"fab fa-instagram\"  style={{color: selectedColor.textColor}}></i>\r\n                                    \r\n                                </div> \r\n                            ): \"\"}\r\n                            {contact.telegram ? (\r\n                                <div className=\"social__contactsFour\">\r\n                                    <p className=\"contact__nameFour\">\r\n                                        {contact.telegram}\r\n                                    </p>\r\n                                    <i class=\"fab fa-telegram-plane\"  style={{color: selectedColor.textColor}}></i>\r\n                                    \r\n                                </div>\r\n                            ): \"\"}\r\n                            {contact.linkedIn? (\r\n                                <div className=\"social__contactsFour\">\r\n                                    <p className=\"contact__nameFour\">\r\n                                        {contact.linkedIn}\r\n                                    </p>\r\n                                    <i class=\"fab fa-linkedin\"  style={{color: selectedColor.textColor}}></i>\r\n                                    \r\n                                </div>\r\n                            ): \"\"}\r\n                    </div>\r\n                </div>\r\n                <div className=\"templateFour__image effect1\">\r\n                    <img src=\"../../assets/images/templateImages/mini.jpg\" alt=\"\"/>\r\n                </div>\r\n                <div className=\"templateFour__body\">\r\n                <div className=\"templateFour__bodyleft\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                    <div className=\"templateFour__righHeadingContainer\">\r\n                        <div className=\"templateFour__fieldsHeader\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                            <p className=\"templateFour__lefHeadings\">education</p> \r\n                        </div>\r\n                            {educations &&\r\n                                educations.map((education, index) =>(\r\n                                <div className=\"temp_fourUniversity\" key={index}>\r\n                                    <div className=\"temp_fourUniDegreeNMajor\">\r\n                                        <p className=\"temp_fourUniversityDegree\">\r\n                                           {education.degree}\r\n                                        </p>\r\n                                       \r\n                                        <p className=\"temp_fourUniversityMajor\">\r\n                                            {education.major}\r\n                                        </p>\r\n                                    </div>\r\n                                    <p className=\"temp_fourUniversityName\">\r\n                                        {education.university}\r\n                                    </p>\r\n                                    <div className=\"temp_fourEductationYears\">\r\n                                        <p className=\"temp_fourStartYear\">\r\n                                            {education.startYear}\r\n                                        </p>\r\n                                        <p className=\"temp_fourDash\">\r\n                                            -\r\n                                        </p>\r\n                                        <p className=\"temp_fourEndYear\">\r\n                                            {education.endYear ? education.endYear : \"To present\"}\r\n                                        </p>\r\n                                    </div>\r\n                                </div>\r\n                                ))\r\n                            }\r\n                    </div>\r\n                    <div className=\"tempFour__line\" style={{borderColor: selectedColor.colorSide}}></div>\r\n                    <div className=\"templateFour__righHeadingContainer\">\r\n                        <div className=\"templateFour__fieldsHeader\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                            <p className=\"templateFour__lefHeadings\">key skills</p>     \r\n                        </div>\r\n                        {keyskillsList &&\r\n                                keyskillsList.map((keyskills, index)=>(\r\n                                <p className=\"temp_fourSkill\" key={index}>\r\n                                   {keyskills.title}\r\n                                </p>\r\n                                ))\r\n                            }\r\n                    </div>\r\n                    <div className=\"tempFour__line\" style={{borderColor: selectedColor.colorSide}}></div>\r\n                    <div className=\"templateFour__righHeadingContainer\">\r\n                        <div className=\"templateFour__fieldsHeader\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                           <p className=\"templateFour__lefHeadings\">technical skills</p>       \r\n                        </div>\r\n                        {techSkillsList &&\r\n                                techSkillsList.map((techSkill, index) =>(\r\n                                <div className=\"temp_fourTechSkill\" key={index}>\r\n                                    <p className=\"temp_fourTechSkillTitle\">\r\n                                        {techSkill.tech_skill}\r\n                                    </p>\r\n                                    {/* {progressColors &&\r\n                                        progressColors.map(color =>( */}\r\n                                            <ProgressBar bgcolor ={selectedColor.colorSide} completed={techSkill.tech_skill_rank}/>\r\n                                        {/* ))\r\n                                    } */}\r\n                                   \r\n                                </div>\r\n                                ))\r\n                            }\r\n                    </div>\r\n                    <div className=\"tempFour__line\" style={{borderColor: selectedColor.colorSide}}></div>\r\n                    <div className=\"templateFour__righHeadingContainer\">\r\n                        <div className=\"templateFour__fieldsHeader\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                           <p className=\"templateFour__lefHeadings\">achievement</p> \r\n                        </div>\r\n                        { achievements && achievements.map((achievement, index) =>(\r\n                                <div className=\"temp_fourAwards\">\r\n                                    <p className=\"temp_fourAwardTitle\">\r\n                                        {achievement.achievement}\r\n                                    </p>\r\n                                    <p className=\"template__fourAward\">{achievement.organizationName} / {achievement.address} </p>\r\n                                    <p className=\"template__fourAward\">{achievement.startYear}</p>\r\n                                </div>\r\n                            ))}\r\n                    </div>\r\n                    <div className=\"tempFour__line\" style={{borderColor: selectedColor.colorSide}}></div>\r\n                    <div className=\"templateFour__righHeadingContainer\">\r\n                        <div className=\"templateFour__fieldsHeader\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                           <p className=\"templateFour__lefHeadings\">languages</p> \r\n                        </div>\r\n                        {languagesList &&\r\n                                languagesList.map((language, index)=>(\r\n                                    <div className=\"temp_fourLanguage\" key={index}>\r\n                                        <p className=\"temp_fourLangTitle col-sm-5 px-0\">\r\n                                            {language.name}\r\n                                        </p>\r\n                                        <p className=\"temp_fourLaguageStick col-sm-2 px-1\">\r\n                                            |\r\n                                        </p>\r\n                                        <p className=\"temp_fourLangLevel col-sm-5 px-0\">\r\n                                            {language.level}\r\n                                        </p>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                    </div>\r\n                    <div className=\"tempFour__line\"  style={{borderColor: selectedColor.colorSide}}></div>\r\n                    <div className=\"templateFour__righHeadingContainer\">\r\n                        <div className=\"templateFour__fieldsHeader\" style={{backgroundColor:selectedColor.colorHead, color: selectedColor.textColor}}>\r\n                           <p className=\"templateFour__lefHeadings\">driving licence</p> \r\n                        </div> \r\n                        {drLicences &&\r\n                                drLicences.map((drL, index)=>(\r\n                                    <div className=\"temp_fourDriving\" key={index}>\r\n                                         <p className=\"temp_fourDrivingTitle col-sm-5 px-0\">\r\n                                            CLASS\r\n                                        </p>\r\n                                        <p className=\"temp_fourDrivingStick col-sm-2 px-1\">\r\n                                            |\r\n                                        </p>\r\n                                        <p className=\"temp_fourDrivingLevel col-sm-5 px-0\">\r\n                                            {drL.title}\r\n                                        </p>\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                    </div>\r\n                </div>\r\n                <div className=\"templateFour__bodyRight\">\r\n                    <div className=\"templateFour__profile\">\r\n                        <div className=\"templateFour__bodyHeadings\">\r\n                            <p className=\"templateFour__bodyHeading\"  style={{color:selectedColor.colorHeadings}}>\r\n                               professional profile\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"tempThree__line\" style={{color:selectedColor.colorLine}}></div>\r\n                        \r\n                        <div className=\"templateThree__bodyContent\">\r\n                            <p>{profileInfo?.aboutMe}</p>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"templateFour__experience\">\r\n                        <div className=\"templateFour__bodyHeadings\">\r\n                            <p className=\"templateFour__bodyHeading\" style={{color:selectedColor.colorHeadings}}>\r\n                                experience\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"tempThree__line\" style={{color:selectedColor.colorLine}}></div>\r\n                        {experiences &&\r\n                                experiences.map((experience, index) =>(\r\n\r\n                                    <div key={index} className=\"template__threeExpJobContainer\">\r\n                                    <div className=\"template__threeExpJobBox\">\r\n                                        <p className=\"template__threeExpJobTitle\">\r\n                                            {experience.jobTitle}\r\n                                        </p>\r\n                                    </div>\r\n                                    <div className=\"template__threeExpJobAddress\">\r\n                                        <p className=\"template__threeExpCompany\">\r\n                                            {experience.companyName}\r\n                                        </p>\r\n                                        <p className=\"template__threeExpDateDash\">\r\n                                            /\r\n                                        </p>\r\n                                        <p className=\"template__threeExpLocation\">\r\n                                        {experience.address}\r\n                                        </p>\r\n                                        <p className=\"template__threeExpDateDash\">\r\n                                            /\r\n                                        </p>\r\n                                        <div className=\"template__threeExpDate\">\r\n                                        <p className=\"template__threeExpStartDate\">\r\n                                            {experience.startYear}\r\n                                        </p>\r\n                                        <p className=\"template__threeExpDateDash\">\r\n                                            -\r\n                                        </p>\r\n                                        <p className=\"template__threeExpEndDate\">\r\n                                            {experience.endYear ? experience.endYear: \"To present\"}\r\n                                        </p>\r\n                                    </div>\r\n                                    </div>\r\n                                    <p className=\"template__threeProfessionalProfContent\">\r\n                                       {experience.aboutJob}\r\n                                    </p>\r\n                                    <p className=\"template__threeProfessionalProfContentResp\">\r\n                                        <ul className=\"template__threeProfessionalLists\">\r\n                                            {experience.projects.map((proj, index)=>(\r\n                                                <li key={index} className=\"template__threeProfessionalList\">\r\n                                                       {proj.project}\r\n                                                 </li> \r\n                                            ))}\r\n                                            \r\n                                           \r\n                                        </ul>\r\n                                    </p>\r\n                                    \r\n                                </div>\r\n\r\n                                ))\r\n                            }\r\n                    </div>\r\n                    <div className=\"templateFour__personalDev\">\r\n                        <div className=\"templateFour__bodyHeadings\">\r\n                            <p className=\"templateFour__bodyHeading\" style={{color:selectedColor.colorHeadings}}>\r\n                                personal development\r\n                            </p>\r\n                        </div>\r\n                        <div className=\"tempThree__line\" style={{color:selectedColor.colorLine}}></div>\r\n                        <div className=\"templateFour__bodyContent\">\r\n                        {personalDevInfo && personalDevInfo.map((personal, index)=>(\r\n                            \r\n                            <div className=\"template__threeProfDevBox\" key={index}>\r\n                                <p className=\"template__threeExpJobTitle\">\r\n                                    {personal.theme}\r\n                                </p>\r\n                                <div>\r\n                                <div className=\"template__threeProfDevAddress\">\r\n                                    <p className=\"template__threeExpCompany\">\r\n                                    {personal.organizationName}\r\n                                    </p>\r\n                                    <p className=\"template__threeExpDateDash\">\r\n                                        /\r\n                                    </p>\r\n                                    <p className=\"template__threeExpLocation\">\r\n                                    {personal.address}\r\n                                    </p>   \r\n                                </div>\r\n                                <div className=\"template__threeExpDate\">\r\n                                    <p className=\"template__threeExpStartDate\">\r\n                                    {personal.year}\r\n                                    </p>\r\n                                </div>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                        )\r\n                       }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                </div>                            \r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TemplateFour\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\achivements\\AchievementForm.js",["308"],"import React, {useState} from 'react';\r\nimport \"../../../styles/EducationForm.css\"\r\nimport { withStyles, makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {saveAchievement} from \"../../../stores/actions/achievementsAction\";\r\nimport PropTypes from 'prop-types';\r\nimport NumberFormat from 'react-number-format';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst ValidationTextField = withStyles({\r\n  root: {\r\n    '& input:invalid + fieldset': {\r\n      borderColor: 'ff1100',\r\n      borderWidth: 2,\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nfunction AchievementForm() {\r\n  const initialYear ={\r\n     startYear:'',\r\n  }\r\n  const [values, setValues] = useState(initialYear);\r\n  const classes = useStyles();\r\n  const {control } = useForm();\r\n  const achievements  = useSelector(state => state.achievementsReducer.achievements);\r\n  const dispatch = useDispatch();\r\n  const [achievementsArr, setAchievementsArr] =useState({})\r\n\r\n  const onSubmit = (e) => {\r\n      e.preventDefault();\r\n    dispatch(saveAchievement(achievementsArr))\r\n    setAchievementsArr({})\r\n    setValues(initialYear)\r\n    e.target.reset()\r\n  };\r\n\r\n  const handleChange = (e)=>{\r\n    // const {name,value} = e.target\r\n     setAchievementsArr(prev => ({...prev, ...{\r\n       [e.target.name] : e.target.value\r\n     }}))\r\n    }\r\n\r\n    return (\r\n      <div className=\"technical__skillsContainer\">\r\n        <div className=\"achievement__boxContainer\">\r\n            {achievements && \r\n            achievements.map((achievement, index)=>(\r\n            <div className=\"achievement__box\" key={index}>\r\n              <div className=\"achievement_boxInfo\">\r\n                  <h5 className=\"tech__skillTitle\">{achievement.achievement}</h5>\r\n                  <p className=\"achievement__address\">{achievement.organizationName} / {achievement.organizationName}</p>\r\n                  <p className=\"achievement__address\">{achievement.startYear}</p>\r\n              </div>\r\n              <div className=\"tech_skillButtons\">\r\n                <Fab size=\"small\" color=\"primary\" aria-label=\"edit\"  className={classes.margin}>\r\n                    <EditIcon className=\"tech__skillEdit\"/>\r\n                </Fab>\r\n                <Fab size=\"small\" color=\"secondary\" aria-label=\"delete\" className={classes.margin}>\r\n                    <DeleteOutlineIcon className=\"tech__skillDelete\"/>\r\n                </Fab>\r\n              </div>\r\n            </div>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n       \r\n        {<form className=\"educationForm\" onSubmit={onSubmit}>\r\n            <Controller\r\n               render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Achievement\"\r\n                      required\r\n                      placeholder=\"IELTS Score 7.5...\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"achievement\"\r\n                      name=\"achievement\"\r\n                    />\r\n                  }\r\n                name=\"achievement\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Organization\"\r\n                      required\r\n                      placeholder=\"British Council\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"organizationName\"\r\n                      name=\"organizationName\"\r\n                    />\r\n                  }\r\n                name=\"organizationName\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Address\"\r\n                      required\r\n                      placeholder=\"213, ...Street, Tashkent, Uzb\"\r\n                      multiline\r\n                      variant=\"outlined\"\r\n                      onChange={e => handleChange(e)}\r\n                      id=\"address\"\r\n                      name=\"address\"\r\n                    />\r\n                  }\r\n                name=\"address\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <div className=\"study__years\">\r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className=\"profileInfoFields\"\r\n                      label=\"Start\"\r\n                      required\r\n                      placeholder=\"2016\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"startYear\"\r\n                      name=\"startYear\"\r\n                      InputProps={{\r\n                        inputComponent: NumberFormatCustom,\r\n                      }}\r\n                    />\r\n                  }\r\n                name=\"startYear\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success btn-block\">save</button>\r\n        </form>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AchievementForm\r\n\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      minLength=\"4\"\r\n      maxLength=\"4\"\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\keySkills\\KeySkillsSelect.js",["309"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\NewM.js",["310","311"],"import React, {useState, useContext} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TechnicalSkillsContext} from \"../../../context/TechnicalSkillsContext\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport PropTypes from 'prop-types';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport NumberFormat from 'react-number-format';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport { withStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {deleteTechSkill, saveTechSkills, getSelectedTechSkill, editTechSkill} from \"../../../stores/actions/technicalSkillsAction\";\r\nimport  \"../../../styles/TechSkills2.css\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n  \r\n  const ValidationTextField = withStyles({\r\n    root: {\r\n      '& input:invalid + fieldset': {\r\n        borderColor: 'ff1100',\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nfunction TechSkills2() {\r\n    const dispatch = useDispatch();\r\n    const techskills = useSelector(state => state.technicalSkillsReducer.techSkillsList)\r\n    const selectedTechSkill = useSelector(state => state.technicalSkillsReducer.selectedTechSkill)\r\n    console.log(\"this is I select\",selectedTechSkill);\r\n\r\n    const {technicalSkills} = useContext(TechnicalSkillsContext);\r\n\r\n  const classes = useStyles();\r\n  const {control,reset } = useForm();\r\n\r\n  const initialState = {\r\n    id:\"\",\r\n    tech_skill:\"\",\r\n    tech_skill_rank:\"\"\r\n  }\r\n    const [techSkill, setTechSkill] = useState(initialState);\r\n    const [selected, setSelected] = useState(\"\");\r\n    const [editClicked, setEditClicked] = useState(false)\r\n\r\nconsole.log(\"TECHSKILL\", techSkill);\r\n\r\n\r\n\r\n    const onSubmit = (e) => {\r\n      e.preventDefault(); \r\n      if(techSkill.id===\"\"){\r\n        dispatch(saveTechSkills({...techSkill, ...{id:Date.now()}}))\r\n      }else{\r\n        dispatch(editTechSkill(techSkill))\r\n      }      \r\n      \r\n     e.target.reset();\r\n     setSelected(\"\")\r\n      setTechSkill(initialState)\r\n    };\r\n  \r\n    const handleRemoveTechSkill =(e, i)=>{\r\n      e.preventDefault()\r\n      dispatch(deleteTechSkill(i))\r\n    }\r\n    const handleEditTechSkill =(e,id)=>{\r\n      e.preventDefault()\r\n      setEditClicked(!editClicked)\r\n      dispatch(getSelectedTechSkill(id))\r\n     let selFromReducer = selectedTechSkill?.tech_skill\r\ntechnicalSkills.map(item =>(\r\n  item.title===selFromReducer? setSelected(item) : \"\"\r\n))\r\n      setTechSkill(selectedTechSkill)\r\n      // setTechSkill({tech_skill: selectedTechSkill.setech_skill, tech_skill_rank: selectedTechSkill.tech_skill_rank}\r\n    // )\r\n    }\r\n\r\n      const handleChange = (e)=>{\r\n      const {name,value} = e.target\r\n      setTechSkill({...techSkill, ...{tech_skill: selected?.title, tech_skill_rank:value}})\r\n      }\r\n      \r\n    return (\r\n        <div className=\"technical__skillsContainer\">\r\n          <div className=\"technical__skillsHeader\">\r\n            {techskills.length!==0 &&\r\n            techskills.map((sk, i) =>(\r\n               <div className=\"tech__skillbox\">\r\n                   <div className=\"tech__skillTitleBox\">\r\n                        <h5 className=\"tech__skillTitle\">{sk.tech_skill +\" \"+ sk.tech_skill_rank} %</h5>\r\n                   </div>\r\n                  <div className=\"tech_skillButtons\">\r\n                    <Fab size=\"small\" color=\"primary\" aria-label=\"edit\" onClick={e=>handleEditTechSkill(e, sk.id)}  className={classes.margin}>\r\n                        <EditIcon className=\"tech__skillEdit\"/>\r\n                    </Fab>\r\n                    <Fab size=\"small\" color=\"secondary\" aria-label=\"delete\" onClick={e=>handleRemoveTechSkill(e, i)} className={classes.margin}>\r\n                        <DeleteOutlineIcon className=\"tech__skillDelete\"/>\r\n                    </Fab>\r\n                  </div>\r\n                  \r\n              </div>\r\n            ))\r\n            }\r\n           \r\n          </div>\r\n            <form className=\"technical__skillsForm\" onSubmit={onSubmit} id=\"tech_skillsForm\" >\r\n                    <div className=\"special_box2\">\r\n                        <Controller\r\n                            render={({onChange, value}) =>\r\n                            <Autocomplete\r\n                                valiant=\"outlined\"\r\n                                options={technicalSkills}\r\n                                className=\"tech__skillsInput\"\r\n                                getOptionLabel={(option) => option.title}\r\n                                id={\"tech_skill\"}\r\n                                required\r\n                                name={\"tech_skill\"}\r\n                                defaultValue={techSkill?.tech_skill}\r\n                                value={selected}\r\n                                onChange={((e, newValue)=>{\r\n                                    setSelected(newValue)\r\n                                })\r\n                                }\r\n                                renderInput={(params) => (\r\n                                <TextField {...params} label=\"Technical Skill\" variant=\"outlined\" margin=\"normal\" />\r\n                                )}\r\n                            />\r\n                            }\r\n                            name={\"tech_skill\"}\r\n                           control={control}\r\n                           rules= {{required: true}}\r\n                           defaultValue={\"\"}\r\n                         /> \r\n                        <Controller\r\n                            render={({onChange, value}) =>\r\n                            <ValidationTextField\r\n                                label=\"Technical skill rank\"\r\n                                className=\"tech__skillsInput\"\r\n                                id=\"tech_rank\"\r\n                                defaultValue={\"\"}\r\n                                onChange={(e=>handleChange(e))}\r\n                                placeholder=\"from 1 to 100\"\r\n                                required\r\n                                value={techSkill?.tech_skill_rank}\r\n                                name=\"tech_skill_rank\"\r\n                                variant=\"outlined\"\r\n                                multiline\r\n                                InputProps={{\r\n                                inputComponent: NumberFormatCustom,\r\n                                }}\r\n                            />\r\n                            }\r\n                            name=\"tech_skill_rank\"\r\n                            control={control}\r\n                            rules= {{required: true}}\r\n                        /> \r\n                    </div>\r\n            <button type=\"submit\" className=\"btn btn-success btn-block mt-3\">save</button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TechSkills2\r\n\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n    const { inputRef, onChange, ...other } = props;\r\n  \r\n    return (\r\n      <NumberFormat\r\n        {...other}\r\n        getInputRef={inputRef}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value,\r\n            },\r\n          });\r\n        }}\r\n        minLength=\"4\"\r\n        maxLength=\"4\"\r\n        isNumericString\r\n      />\r\n    );\r\n  }\r\n  \r\n  NumberFormatCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n  };","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\keySkillsAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\personalDevAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\education\\EducationForm.js",["312"],"import React, {useState} from 'react';\r\nimport \"../../../styles/EducationForm.css\"\r\nimport { withStyles, makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {saveEducation} from \"../../../stores/actions/educationFormAction\";\r\nimport PropTypes from 'prop-types';\r\nimport NumberFormat from 'react-number-format';\r\nimport Switch from '@material-ui/core/Switch';\r\nimport FormGroup from '@material-ui/core/FormGroup';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport countries from \"i18n-iso-countries\";\r\nimport uzbek from \"i18n-iso-countries/langs/uz.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst ValidationTextField = withStyles({\r\n  root: {\r\n    '& input:invalid + fieldset': {\r\n      borderColor: 'ff1100',\r\n      borderWidth: 2,\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nfunction EducationForm() {\r\n  const [checked, setChecked] = useState(false); \r\n  const initialValue={\r\n     endYear: '',\r\n    startYear:'',\r\n  }\r\n  const [values, setValues] = useState(initialValue);\r\n  const classes = useStyles();\r\n  const {control } = useForm();\r\n  const education  = useSelector(state => state.educationReducer.education);\r\n  const dispatch = useDispatch();\r\n  const [educationFields, setEducationFields] = useState([])\r\n   \r\n const onSubmit = (e) => {\r\n      e.preventDefault();\r\n    dispatch(saveEducation(educationFields))\r\n    setChecked(false)\r\n    setValues(initialValue)\r\n    e.target.reset()\r\n  };\r\n \r\n    const handleChange = (e)=>{\r\n     \r\n      setValues({\r\n        ...values,\r\n        [e.target.name]: e.target.value,\r\n      });\r\n      setEducationFields({\r\n        ...educationFields,\r\n        ...{[e.target.name]: e.target.value}\r\n      })\r\n      // const {name, value} = e.target\r\n      // education[name]=value\r\n      \r\n      console.log(\"education>>>\", education);\r\n    }\r\n    countries.registerLocale(uzbek);\r\n    const uz = countries.getNames(\"uz\", {select: \"official\"})\r\n    console.log(uz);\r\n    return (\r\n      <div>\r\n        {<form className=\"educationForm\" onSubmit={onSubmit}>\r\n            <Controller\r\n               render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Degree\"\r\n                      required\r\n                      placeholder=\"Bachelor's\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"degree\"\r\n                      name=\"degree\"\r\n                    />\r\n                  }\r\n                name=\"degree\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Major\"\r\n                      required\r\n                      placeholder=\"Computer Science\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"major\"\r\n                      name=\"major\"\r\n                    />\r\n                  }\r\n                name=\"major\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"University\"\r\n                      required\r\n                      placeholder=\"Harvard\"\r\n                      multiline\r\n                      variant=\"outlined\"\r\n                      onChange={e => handleChange(e)}\r\n                      id=\"university\"\r\n                      name=\"university\"\r\n                    />\r\n                  }\r\n                name=\"university\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <div className=\"study__years\">\r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className=\"profileInfoFields\"\r\n                      label=\"Start\"\r\n                      required\r\n                      value={values.startYear}\r\n                      placeholder=\"2016\"\r\n                      multiline\r\n                      onChange={handleChange}\r\n                      variant=\"outlined\"\r\n                      id=\"startYear\"\r\n                      name=\"startYear\"\r\n                      InputProps={{\r\n                        inputComponent: NumberFormatCustom,\r\n                      }}\r\n                    />\r\n                  }\r\n                name=\"startYear\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            {checked ? \" \" : ( \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                <ValidationTextField\r\n                    label=\"End\"\r\n                    className=\"profileInfoFields\"\r\n                    value={values.endYear}\r\n                    onChange={handleChange}\r\n                    placeholder=\"2021\"\r\n                    required\r\n                    name=\"endYear\"\r\n                    variant=\"outlined\"\r\n                    multiline\r\n                    id=\"endYear\"\r\n                    InputProps={{\r\n                      inputComponent: NumberFormatCustom,\r\n                    }}\r\n              />\r\n                  }\r\n                name=\"endYear\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            )} \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <FormGroup>\r\n                   <FormControlLabel\r\n                       control={<Switch checked={checked} color=\"primary\" \r\n                       name=\"toPresent\" \r\n                       onChange={e=>{setChecked(!checked)}} \r\n                       value={checked}\r\n                       />}\r\n                       label={checked? \"To present\" : \"\"}\r\n                   />\r\n                   </FormGroup>\r\n                   }\r\n                   name=\"toPresent\"\r\n                   control={control}\r\n                   // rules= {{required:false}} \r\n            />\r\n\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success btn-block\">save</button>\r\n        </form>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default EducationForm\r\n\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      minLength=\"4\"\r\n      maxLength=\"4\"\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\createProfile\\ProfileForm.js",["313"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\experienceAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\contactInfoAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\i18nextConfig.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Home.js",["314"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\Candidates.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PageNotFound.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\rootReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\JobSearchMain.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\templates\\TemplateOne.js",["315","316","317","318","319","320"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\colorReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\CandidateSearchRight.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\JobSearchRight.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\ProgressBar.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\templates\\TemplateTwo.js",["321","322","323","324","325","326","327","328","329","330"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\personalDevelopment\\PersonalDevelopment.js",["331"],"import React, {useState} from 'react';\r\nimport \"../../../styles/EducationForm.css\"\r\nimport { withStyles, makeStyles} from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {savePersonalDev} from \"../../../stores/actions/personalDevAction\";\r\nimport PropTypes from 'prop-types';\r\nimport NumberFormat from 'react-number-format';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    '& > *': {\r\n      margin: theme.spacing(1),\r\n    },\r\n  },\r\n}));\r\n\r\nconst ValidationTextField = withStyles({\r\n  root: {\r\n    '& input:invalid + fieldset': {\r\n      borderColor: 'ff1100',\r\n      borderWidth: 2,\r\n    },\r\n  },\r\n})(TextField);\r\n\r\nfunction PersonalDevelopment() {\r\n  const [values, setValues] = useState({\r\n    year:'',\r\n  });\r\n  const classes = useStyles();\r\n  const {control } = useForm();\r\n  const personalDevInfo  = useSelector(state => state.personalDevReducer.personalDevInfo);\r\n  const dispatch = useDispatch();\r\n  const [personalD, setPersonalD] =useState({})\r\n\r\n  const onSubmit = (e) => {\r\n      e.preventDefault();\r\n    dispatch(savePersonalDev(personalD))\r\n    setPersonalD({})\r\n    e.target.reset()\r\n    setValues(\"\")\r\n  };\r\n\r\n  const handleChange = (e)=>{\r\n    // const {name,value} = e.target\r\n    setPersonalD(prev => ({...prev, ...{\r\n       [e.target.name] : e.target.value\r\n     }}))\r\n    }\r\n\r\n    return (\r\n      <div className=\"technical__skillsContainer\">\r\n        <div className=\"achievement__boxContainer\">\r\n            {personalDevInfo && \r\n            personalDevInfo.map((personal, index)=>(\r\n            <div className=\"achievement__box\" key={index}>\r\n              <div className=\"achievement_boxInfo\">\r\n                  <h5 className=\"tech__skillTitle\">{personal.achievement}</h5>\r\n                  <p className=\"achievement__address\">{personal.organizationName} / {personal.address}</p>\r\n                  <p className=\"achievement__address\">{personal.year}</p>\r\n              </div>\r\n              <div className=\"tech_skillButtons\">\r\n                <Fab size=\"small\" color=\"primary\" aria-label=\"edit\"  className={classes.margin}>\r\n                    <EditIcon className=\"tech__skillEdit\"/>\r\n                </Fab>\r\n                <Fab size=\"small\" color=\"secondary\" aria-label=\"delete\" className={classes.margin}>\r\n                    <DeleteOutlineIcon className=\"tech__skillDelete\"/>\r\n                </Fab>\r\n              </div>\r\n            </div>\r\n              )\r\n            )\r\n          }\r\n        </div>\r\n       \r\n        {<form className=\"educationForm\" onSubmit={onSubmit}>\r\n            <Controller\r\n               render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Theme\"\r\n                      required\r\n                      placeholder=\"Web dev course\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"achievement\"\r\n                      name=\"theme\"\r\n                    />\r\n                  }\r\n                name=\"theme\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Organization\"\r\n                      required\r\n                      placeholder=\"Udemy\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"organizationName\"\r\n                      name=\"organizationName\"\r\n                    />\r\n                  }\r\n                name=\"organizationName\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className={\"profileInfoFields\"}\r\n                      label=\"Address\"\r\n                      required\r\n                      placeholder=\"213, ...Street, Tashkent, Uzb\"\r\n                      multiline\r\n                      variant=\"outlined\"\r\n                      onChange={e => handleChange(e)}\r\n                      id=\"address\"\r\n                      name=\"address\"\r\n                    />\r\n                  }\r\n                name=\"address\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            /> \r\n            <div className=\"study__years\">\r\n            <Controller\r\n                render={({onChange, value}) =>\r\n                   <ValidationTextField\r\n                      className=\"profileInfoFields\"\r\n                      label=\"Year\"\r\n                      required\r\n                      placeholder=\"2019\"\r\n                      multiline\r\n                      onChange={e => handleChange(e)}\r\n                      variant=\"outlined\"\r\n                      id=\"year\"\r\n                      name=\"year\"\r\n                      InputProps={{\r\n                        inputComponent: NumberFormatCustom,\r\n                      }}\r\n                    />\r\n                  }\r\n                name=\"year\"\r\n                control={control}\r\n                rules= {{required: true}}\r\n            />\r\n            </div>\r\n            <button type=\"submit\" className=\"btn btn-success btn-block\">save</button>\r\n        </form>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonalDevelopment\r\n\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n  const { inputRef, onChange, ...other } = props;\r\n\r\n  return (\r\n    <NumberFormat\r\n      {...other}\r\n      getInputRef={inputRef}\r\n      onValueChange={(values) => {\r\n        onChange({\r\n          target: {\r\n            name: props.name,\r\n            value: values.value,\r\n          },\r\n        });\r\n      }}\r\n      minLength=\"4\"\r\n      maxLength=\"4\"\r\n      isNumericString\r\n    />\r\n  );\r\n}\r\n\r\nNumberFormatCustom.propTypes = {\r\n  inputRef: PropTypes.func.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\technicalSkills\\TechnicalSkills.js",["332"],"import React, {useState, useContext} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {TechnicalSkillsContext} from \"../../../context/TechnicalSkillsContext\";\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { Controller, useForm } from \"react-hook-form\";\r\nimport PropTypes from 'prop-types';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport NumberFormat from 'react-number-format';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport DeleteOutlineIcon from '@material-ui/icons/DeleteOutline';\r\nimport { withStyles, makeStyles} from '@material-ui/core/styles';\r\nimport {saveTechSkills} from \"../../../stores/actions/technicalSkillsAction\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n      '& > *': {\r\n        margin: theme.spacing(1),\r\n      },\r\n    },\r\n  }));\r\n  \r\n  const ValidationTextField = withStyles({\r\n    root: {\r\n      '& input:invalid + fieldset': {\r\n        borderColor: 'ff1100',\r\n        borderWidth: 2,\r\n      },\r\n    },\r\n  })(TextField);\r\n\r\nfunction TechnicalSkills() {\r\n    const dispatch = useDispatch();\r\n    const techskills = useSelector(state => state.technicalSkillsReducer.techSkillsList)\r\n    const {technicalSkills} = useContext(TechnicalSkillsContext);\r\n    console.log(\"tech---->\", technicalSkills);\r\n    const classes = useStyles();\r\n  const {control } = useForm();\r\n    const [techSkill, setTechSkill] = useState([{tech_skill: \"\", tech_skill_rank: \"\"}]);\r\n    const [selected, setSelected] = useState(null);\r\n    console.log(\"selected>>>>\", selected);\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n      dispatch(saveTechSkills(techSkill))\r\n    };\r\n  \r\n    const handleRemoveTechSkill =(i)=>{\r\n        let list = [...techSkill];\r\n        list.splice(i, 1);\r\n        setTechSkill(list);\r\n    }\r\n  \r\n    const handleAddTechSkill =()=>{\r\n        setTechSkill([...techSkill, {tech_skill: \"\",  tech_skill_rank: \"\"}]);\r\n    }\r\n      \r\n      const handleChange = (e, i)=>{\r\n      const {name,value} = e.target\r\n      let list = [...techSkill];\r\n      if(list[i].tech_skill===\"\"){\r\n        list[i].tech_skill = selected.title\r\n        list[i].tech_skill_rank=value\r\n      }else{\r\n          list[i][name] =value;\r\n      }\r\n      setTechSkill(list)\r\n      }\r\n    return (\r\n        <div>\r\n          <div>\r\n            {techSkill.length!==0 &&\r\n            techSkill.map((sk, i) =>(\r\n               <div className=\"card\">\r\n                  <h5>{sk.tech_skill + sk.tech_skill_rank}%</h5>\r\n                  <button>e</button><button>d</button>\r\n              </div>\r\n            ))\r\n            }\r\n           \r\n          </div>\r\n            <form onSubmit={onSubmit}>\r\n            {techSkill.map((skill, i) =>{\r\n                return(\r\n                    <div className=\"special_box2\">\r\n                        <Controller\r\n                            render={({onChange, value}) =>\r\n                            <Autocomplete\r\n                                valiant=\"outlined\"\r\n                                options={technicalSkills}\r\n                                getOptionLabel={(option) => option.title}\r\n                                id={\"tech_skill\"+i}\r\n                                name={\"tech_skill\"+i}\r\n                                value={selected}\r\n                                onChange={((e, newValue)=>{\r\n                                    setSelected(newValue)\r\n                                })\r\n                                }\r\n                                renderInput={(params) => (\r\n                                <TextField {...params} label=\"controlled\" variant=\"outlined\" margin=\"normal\" />\r\n                                )}\r\n                            />\r\n                            }\r\n                            name={\"tech_skill\"+i}\r\n                           control={control}\r\n                           rules= {{required: true}}\r\n                         /> \r\n                        <Controller\r\n                            render={({onChange, value}) =>\r\n                            <ValidationTextField\r\n                                label=\"Technical skill rank\"\r\n                                className=\"profileInfoFields\"\r\n                                defaultValue={skill.tech_skill_rank}\r\n                                onChange={e=>handleChange(e,i)}\r\n                                placeholder=\"from 1 to 100\"\r\n                                required\r\n                                name=\"tech_skill_rank\"\r\n                                variant=\"outlined\"\r\n                                multiline\r\n                                InputProps={{\r\n                                inputComponent: NumberFormatCustom,\r\n                                }}\r\n                            />\r\n                            }\r\n                            name=\"tech_skill_rank\"\r\n                            control={control}\r\n                            rules= {{required: true}}\r\n                        /> \r\n                         <div className=\"button__box\">\r\n                             {techSkill.length !==1 && \r\n                             <Fab size=\"small\" color=\"secondary\" aria-label=\"add\" onClick={()=> handleRemoveTechSkill(i) } className={classes.margin}>\r\n                               <DeleteOutlineIcon/>\r\n                             </Fab>\r\n                             }\r\n                             {techSkill.length - 1 ===i && \r\n                             <Fab size=\"small\" color=\"primary\" aria-label=\"add\" onClick={handleAddTechSkill} className={classes.margin}>\r\n                               <AddIcon/>\r\n                             </Fab>\r\n                             \r\n                             }\r\n                         </div>\r\n                    </div>\r\n                )\r\n            })}\r\n            \r\n            <button type=\"submit\" className=\"btn btn-success btn-block\">save</button>\r\n            </form>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TechnicalSkills\r\n\r\n\r\n\r\nfunction NumberFormatCustom(props) {\r\n    const { inputRef, onChange, ...other } = props;\r\n  \r\n    return (\r\n      <NumberFormat\r\n        {...other}\r\n        getInputRef={inputRef}\r\n        onValueChange={(values) => {\r\n          onChange({\r\n            target: {\r\n              name: props.name,\r\n              value: values.value,\r\n            },\r\n          });\r\n        }}\r\n        minLength=\"4\"\r\n        maxLength=\"4\"\r\n        isNumericString\r\n      />\r\n    );\r\n  }\r\n  \r\n  NumberFormatCustom.propTypes = {\r\n    inputRef: PropTypes.func.isRequired,\r\n    name: PropTypes.string.isRequired,\r\n    onChange: PropTypes.func.isRequired,\r\n  };","E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\experience\\ExperienceForm2.js",["333","334"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\technicalSkillsAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostView.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\languagesAction.js",["335","336","337","338","339","340"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\drivingLAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\tab\\TabForTemplates.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\pages\\BuildCV.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\drivingLReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\profileReducer.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\reducers\\educationFormReducer.js",["341"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\CandidateSearchMain.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\BannerCandidates.js",["342","343","344"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\ColorPicker.js",["345"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\PostView1.js",["346"],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\DrawerPost.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\stores\\actions\\educationFormAction.js",[],"E:\\1MyProjects\\GitHub\\hr\\resume-builder-front\\src\\components\\resumeBuilder\\languageFrom\\LanguageForm.js",["347","348","349","350","351","352","353"],{"ruleId":"354","severity":1,"message":"355","line":54,"column":29,"nodeType":"356","endLine":54,"endColumn":102},{"ruleId":"354","severity":1,"message":"355","line":61,"column":29,"nodeType":"356","endLine":61,"endColumn":102},{"ruleId":"357","severity":1,"message":"358","line":1,"column":16,"nodeType":"359","messageId":"360","endLine":1,"endColumn":26},{"ruleId":"361","replacedBy":"362"},{"ruleId":"363","replacedBy":"364"},{"ruleId":"361","replacedBy":"365"},{"ruleId":"363","replacedBy":"366"},{"ruleId":"357","severity":1,"message":"367","line":17,"column":31,"nodeType":"359","messageId":"360","endLine":17,"endColumn":42},{"ruleId":"368","severity":1,"message":"369","line":36,"column":3,"nodeType":"370","messageId":"371","endLine":36,"endColumn":32,"fix":"372"},{"ruleId":"357","severity":1,"message":"373","line":15,"column":11,"nodeType":"359","messageId":"360","endLine":15,"endColumn":18},{"ruleId":"357","severity":1,"message":"374","line":4,"column":8,"nodeType":"359","messageId":"360","endLine":4,"endColumn":19},{"ruleId":"357","severity":1,"message":"375","line":40,"column":13,"nodeType":"359","messageId":"360","endLine":40,"endColumn":14},{"ruleId":"357","severity":1,"message":"376","line":45,"column":11,"nodeType":"359","messageId":"360","endLine":45,"endColumn":18},{"ruleId":"357","severity":1,"message":"377","line":46,"column":54,"nodeType":"359","messageId":"360","endLine":46,"endColumn":63},{"ruleId":"357","severity":1,"message":"378","line":49,"column":12,"nodeType":"359","messageId":"360","endLine":49,"endColumn":22},{"ruleId":"357","severity":1,"message":"379","line":63,"column":11,"nodeType":"359","messageId":"360","endLine":63,"endColumn":20},{"ruleId":"357","severity":1,"message":"380","line":10,"column":10,"nodeType":"359","messageId":"360","endLine":10,"endColumn":15},{"ruleId":"357","severity":1,"message":"381","line":25,"column":17,"nodeType":"359","messageId":"360","endLine":25,"endColumn":25},{"ruleId":"382","severity":1,"message":"383","line":58,"column":6,"nodeType":"384","endLine":58,"endColumn":15,"suggestions":"385"},{"ruleId":"357","severity":1,"message":"386","line":13,"column":8,"nodeType":"359","messageId":"360","endLine":13,"endColumn":19},{"ruleId":"357","severity":1,"message":"387","line":14,"column":8,"nodeType":"359","messageId":"360","endLine":14,"endColumn":23},{"ruleId":"357","severity":1,"message":"388","line":1,"column":16,"nodeType":"359","messageId":"360","endLine":1,"endColumn":24},{"ruleId":"357","severity":1,"message":"389","line":11,"column":8,"nodeType":"359","messageId":"360","endLine":11,"endColumn":22},{"ruleId":"357","severity":1,"message":"390","line":11,"column":24,"nodeType":"359","messageId":"360","endLine":11,"endColumn":41},{"ruleId":"357","severity":1,"message":"391","line":20,"column":7,"nodeType":"359","messageId":"360","endLine":20,"endColumn":15},{"ruleId":"357","severity":1,"message":"392","line":33,"column":7,"nodeType":"359","messageId":"360","endLine":33,"endColumn":14},{"ruleId":"357","severity":1,"message":"393","line":35,"column":10,"nodeType":"359","messageId":"360","endLine":35,"endColumn":16},{"ruleId":"357","severity":1,"message":"394","line":83,"column":7,"nodeType":"359","messageId":"360","endLine":83,"endColumn":14},{"ruleId":"357","severity":1,"message":"395","line":42,"column":18,"nodeType":"359","messageId":"360","endLine":42,"endColumn":23},{"ruleId":"357","severity":1,"message":"396","line":88,"column":14,"nodeType":"359","messageId":"360","endLine":88,"endColumn":18},{"ruleId":"357","severity":1,"message":"397","line":40,"column":9,"nodeType":"359","messageId":"360","endLine":40,"endColumn":16},{"ruleId":"357","severity":1,"message":"398","line":32,"column":10,"nodeType":"359","messageId":"360","endLine":32,"endColumn":22},{"ruleId":"357","severity":1,"message":"399","line":3,"column":8,"nodeType":"359","messageId":"360","endLine":3,"endColumn":14},{"ruleId":"357","severity":1,"message":"397","line":24,"column":11,"nodeType":"359","messageId":"360","endLine":24,"endColumn":18},{"ruleId":"357","severity":1,"message":"389","line":25,"column":8,"nodeType":"359","messageId":"360","endLine":25,"endColumn":22},{"ruleId":"357","severity":1,"message":"390","line":25,"column":24,"nodeType":"359","messageId":"360","endLine":25,"endColumn":41},{"ruleId":"357","severity":1,"message":"391","line":34,"column":7,"nodeType":"359","messageId":"360","endLine":34,"endColumn":15},{"ruleId":"357","severity":1,"message":"392","line":47,"column":7,"nodeType":"359","messageId":"360","endLine":47,"endColumn":14},{"ruleId":"354","severity":1,"message":"355","line":301,"column":49,"nodeType":"356","endLine":301,"endColumn":98},{"ruleId":"357","severity":1,"message":"400","line":3,"column":8,"nodeType":"359","messageId":"360","endLine":3,"endColumn":16},{"ruleId":"357","severity":1,"message":"401","line":4,"column":8,"nodeType":"359","messageId":"360","endLine":4,"endColumn":23},{"ruleId":"357","severity":1,"message":"402","line":5,"column":8,"nodeType":"359","messageId":"360","endLine":5,"endColumn":16},{"ruleId":"357","severity":1,"message":"403","line":6,"column":8,"nodeType":"359","messageId":"360","endLine":6,"endColumn":20},{"ruleId":"357","severity":1,"message":"404","line":7,"column":8,"nodeType":"359","messageId":"360","endLine":7,"endColumn":20},{"ruleId":"357","severity":1,"message":"405","line":8,"column":8,"nodeType":"359","messageId":"360","endLine":8,"endColumn":20},{"ruleId":"357","severity":1,"message":"406","line":9,"column":8,"nodeType":"359","messageId":"360","endLine":9,"endColumn":21},{"ruleId":"357","severity":1,"message":"389","line":15,"column":8,"nodeType":"359","messageId":"360","endLine":15,"endColumn":22},{"ruleId":"357","severity":1,"message":"390","line":15,"column":24,"nodeType":"359","messageId":"360","endLine":15,"endColumn":41},{"ruleId":"357","severity":1,"message":"391","line":24,"column":7,"nodeType":"359","messageId":"360","endLine":24,"endColumn":15},{"ruleId":"357","severity":1,"message":"393","line":32,"column":10,"nodeType":"359","messageId":"360","endLine":32,"endColumn":16},{"ruleId":"357","severity":1,"message":"407","line":34,"column":11,"nodeType":"359","messageId":"360","endLine":34,"endColumn":21},{"ruleId":"357","severity":1,"message":"408","line":44,"column":28,"nodeType":"359","messageId":"360","endLine":44,"endColumn":47},{"ruleId":"357","severity":1,"message":"409","line":59,"column":9,"nodeType":"359","messageId":"360","endLine":59,"endColumn":19},{"ruleId":"357","severity":1,"message":"410","line":25,"column":19,"nodeType":"359","messageId":"360","endLine":25,"endColumn":25},{"ruleId":"411","severity":1,"message":"412","line":29,"column":17,"nodeType":"413","messageId":"414","endLine":31,"endColumn":2},{"ruleId":"357","severity":1,"message":"410","line":46,"column":19,"nodeType":"359","messageId":"360","endLine":46,"endColumn":25},{"ruleId":"411","severity":1,"message":"412","line":49,"column":17,"nodeType":"413","messageId":"414","endLine":51,"endColumn":2},{"ruleId":"357","severity":1,"message":"410","line":66,"column":19,"nodeType":"359","messageId":"360","endLine":66,"endColumn":25},{"ruleId":"411","severity":1,"message":"412","line":69,"column":17,"nodeType":"413","messageId":"414","endLine":71,"endColumn":2},{"ruleId":"357","severity":1,"message":"415","line":1,"column":44,"nodeType":"359","messageId":"360","endLine":1,"endColumn":58},{"ruleId":"357","severity":1,"message":"388","line":1,"column":16,"nodeType":"359","messageId":"360","endLine":1,"endColumn":24},{"ruleId":"357","severity":1,"message":"416","line":1,"column":38,"nodeType":"359","messageId":"360","endLine":1,"endColumn":47},{"ruleId":"357","severity":1,"message":"417","line":8,"column":8,"nodeType":"359","messageId":"360","endLine":8,"endColumn":13},{"ruleId":"357","severity":1,"message":"388","line":1,"column":16,"nodeType":"359","messageId":"360","endLine":1,"endColumn":24},{"ruleId":"357","severity":1,"message":"418","line":5,"column":9,"nodeType":"359","messageId":"360","endLine":5,"endColumn":20},{"ruleId":"357","severity":1,"message":"419","line":8,"column":10,"nodeType":"359","messageId":"360","endLine":8,"endColumn":20},{"ruleId":"357","severity":1,"message":"420","line":38,"column":8,"nodeType":"359","messageId":"360","endLine":38,"endColumn":21},{"ruleId":"382","severity":1,"message":"421","line":49,"column":4,"nodeType":"384","endLine":49,"endColumn":6,"suggestions":"422"},{"ruleId":"382","severity":1,"message":"421","line":52,"column":4,"nodeType":"384","endLine":52,"endColumn":6,"suggestions":"423"},{"ruleId":"382","severity":1,"message":"421","line":55,"column":4,"nodeType":"384","endLine":55,"endColumn":6,"suggestions":"424"},{"ruleId":"357","severity":1,"message":"396","line":62,"column":12,"nodeType":"359","messageId":"360","endLine":62,"endColumn":16},{"ruleId":"425","severity":1,"message":"426","line":136,"column":87,"nodeType":"427","messageId":"428","endLine":136,"endColumn":88},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'useContext' is defined but never used.","Identifier","unusedVar","no-native-reassign",["429"],"no-negated-in-lhs",["430"],["429"],["430"],"'JobsContext' is defined but never used.","no-whitespace-before-property","Unexpected whitespace before property requestAnimationFrame.","MemberExpression","unexpectedWhitespace",{"range":"431","text":"432"},"'history' is assigned a value but never used.","'TemplateTwo' is defined but never used.","'t' is assigned a value but never used.","'postjob' is assigned a value but never used.","'formState' is assigned a value but never used.","'postedData' is assigned a value but never used.","'techSkill' is assigned a value but never used.","'sleep' is defined but never used.","'setCount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'count'. Either include it or remove the dependency array.","ArrayExpression",["433"],"'TechSkills2' is defined but never used.","'TechnicalSkills' is defined but never used.","'useState' is defined but never used.","'progressColors' is assigned a value but never used.","'setProgressColors' is assigned a value but never used.","'dispatch' is assigned a value but never used.","'options' is assigned a value but never used.","'values' is assigned a value but never used.","'jobList' is assigned a value but never used.","'reset' is assigned a value but never used.","'name' is assigned a value but never used.","'classes' is assigned a value but never used.","'handleSubmit' is assigned a value but never used.","'Resume' is defined but never used.","'CallIcon' is defined but never used.","'MailOutlineIcon' is defined but never used.","'RoomIcon' is defined but never used.","'LinkedInIcon' is defined but never used.","'TelegramIcon' is defined but never used.","'FacebookIcon' is defined but never used.","'InstagramIcon' is defined but never used.","'techskills' is assigned a value but never used.","'setProjectInputList' is assigned a value but never used.","'experience' is assigned a value but never used.","'errMsg' is assigned a value but never used.","no-unreachable","Unreachable code.","BlockStatement","unreachableCode","'GET_EDUCATIONS' is defined but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.","'useDispatch' is defined but never used.","'withStyles' is defined but never used.","'selectedLevel' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["434"],["435"],["436"],"no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation",[1140,1142],".",{"desc":"437","fix":"438"},{"desc":"439","fix":"440"},{"desc":"439","fix":"441"},{"desc":"439","fix":"442"},"Update the dependencies array to be: [t, i18n, count]",{"range":"443","text":"444"},"Update the dependencies array to be: [dispatch]",{"range":"445","text":"446"},{"range":"447","text":"446"},{"range":"448","text":"446"},[1758,1767],"[t, i18n, count]",[1776,1778],"[dispatch]",[1833,1835],[1890,1892]]